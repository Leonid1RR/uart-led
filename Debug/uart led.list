
uart led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002d04  08002d04  00003d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d38  08002d38  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002d38  08002d38  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002d38  08002d38  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d38  08002d38  00003d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d3c  08002d3c  00003d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002d40  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  08002d50  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002d50  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc88  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbd  00000000  00000000  0000fcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00011880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000969  00000000  00000000  00012478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c6b  00000000  00000000  00012de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce9e  00000000  00000000  00029a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868ee  00000000  00000000  000368ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd1d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003254  00000000  00000000  000bd21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000c0470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cec 	.word	0x08002cec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002cec 	.word	0x08002cec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc48 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f878 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f92c 	bl	80003b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f8b0 	bl	80002c0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8fe 	bl	8000360 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, sizeof(rx_data));
 8000164:	2206      	movs	r2, #6
 8000166:	4934      	ldr	r1, [pc, #208]	@ (8000238 <main+0xec>)
 8000168:	4834      	ldr	r0, [pc, #208]	@ (800023c <main+0xf0>)
 800016a:	f002 f84c 	bl	8002206 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!(GPIOB->IDR & (1<<6))){
 800016e:	4b34      	ldr	r3, [pc, #208]	@ (8000240 <main+0xf4>)
 8000170:	689b      	ldr	r3, [r3, #8]
 8000172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000176:	2b00      	cmp	r3, #0
 8000178:	d112      	bne.n	80001a0 <main+0x54>
	  	while (!(GPIOB->IDR & (1 << 6)));
 800017a:	bf00      	nop
 800017c:	4b30      	ldr	r3, [pc, #192]	@ (8000240 <main+0xf4>)
 800017e:	689b      	ldr	r3, [r3, #8]
 8000180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000184:	2b00      	cmp	r3, #0
 8000186:	d0f9      	beq.n	800017c <main+0x30>
	  	HAL_Delay(100);
 8000188:	2064      	movs	r0, #100	@ 0x64
 800018a:	f000 fc8d 	bl	8000aa8 <HAL_Delay>
	  	collect_password('1');
 800018e:	2031      	movs	r0, #49	@ 0x31
 8000190:	f000 fa78 	bl	8000684 <collect_password>
	  	check;
 8000194:	4b2b      	ldr	r3, [pc, #172]	@ (8000244 <main+0xf8>)
 8000196:	68db      	ldr	r3, [r3, #12]
 8000198:	4a2a      	ldr	r2, [pc, #168]	@ (8000244 <main+0xf8>)
 800019a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800019e:	60d3      	str	r3, [r2, #12]
	  }
	  if(!(GPIOB->IDR & (1<<7))){
 80001a0:	4b27      	ldr	r3, [pc, #156]	@ (8000240 <main+0xf4>)
 80001a2:	689b      	ldr	r3, [r3, #8]
 80001a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d112      	bne.n	80001d2 <main+0x86>
	  	while (!(GPIOB->IDR & (1 << 7)));
 80001ac:	bf00      	nop
 80001ae:	4b24      	ldr	r3, [pc, #144]	@ (8000240 <main+0xf4>)
 80001b0:	689b      	ldr	r3, [r3, #8]
 80001b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d0f9      	beq.n	80001ae <main+0x62>
	  	HAL_Delay(100);
 80001ba:	2064      	movs	r0, #100	@ 0x64
 80001bc:	f000 fc74 	bl	8000aa8 <HAL_Delay>
	  	collect_password('2');
 80001c0:	2032      	movs	r0, #50	@ 0x32
 80001c2:	f000 fa5f 	bl	8000684 <collect_password>
	  	check;
 80001c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000244 <main+0xf8>)
 80001c8:	68db      	ldr	r3, [r3, #12]
 80001ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000244 <main+0xf8>)
 80001cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80001d0:	60d3      	str	r3, [r2, #12]
	  }
	  if(!(GPIOB->IDR & (1<<8))){
 80001d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000240 <main+0xf4>)
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d112      	bne.n	8000204 <main+0xb8>
	  	while (!(GPIOB->IDR & (1 << 8)));
 80001de:	bf00      	nop
 80001e0:	4b17      	ldr	r3, [pc, #92]	@ (8000240 <main+0xf4>)
 80001e2:	689b      	ldr	r3, [r3, #8]
 80001e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d0f9      	beq.n	80001e0 <main+0x94>
	  	HAL_Delay(100);
 80001ec:	2064      	movs	r0, #100	@ 0x64
 80001ee:	f000 fc5b 	bl	8000aa8 <HAL_Delay>
	  	collect_password('3');
 80001f2:	2033      	movs	r0, #51	@ 0x33
 80001f4:	f000 fa46 	bl	8000684 <collect_password>
	  	check;
 80001f8:	4b12      	ldr	r3, [pc, #72]	@ (8000244 <main+0xf8>)
 80001fa:	68db      	ldr	r3, [r3, #12]
 80001fc:	4a11      	ldr	r2, [pc, #68]	@ (8000244 <main+0xf8>)
 80001fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000202:	60d3      	str	r3, [r2, #12]
	  }
	  if(!(GPIOB->IDR & (1<<9))){
 8000204:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <main+0xf4>)
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800020c:	2b00      	cmp	r3, #0
 800020e:	d1ae      	bne.n	800016e <main+0x22>
	  	while (!(GPIOB->IDR & (1 << 9)));
 8000210:	bf00      	nop
 8000212:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <main+0xf4>)
 8000214:	689b      	ldr	r3, [r3, #8]
 8000216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <main+0xc6>
	  	HAL_Delay(100);
 800021e:	2064      	movs	r0, #100	@ 0x64
 8000220:	f000 fc42 	bl	8000aa8 <HAL_Delay>
	  	check;
 8000224:	4b07      	ldr	r3, [pc, #28]	@ (8000244 <main+0xf8>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a06      	ldr	r2, [pc, #24]	@ (8000244 <main+0xf8>)
 800022a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800022e:	60d3      	str	r3, [r2, #12]
	  	send_password();
 8000230:	f000 fa4c 	bl	80006cc <send_password>
	  if(!(GPIOB->IDR & (1<<6))){
 8000234:	e79b      	b.n	800016e <main+0x22>
 8000236:	bf00      	nop
 8000238:	200000bc 	.word	0x200000bc
 800023c:	20000074 	.word	0x20000074
 8000240:	40010c00 	.word	0x40010c00
 8000244:	40011000 	.word	0x40011000

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	@ 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	@ 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fd1c 	bl	8002c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000276:	2300      	movs	r3, #0
 8000278:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	4618      	mov	r0, r3
 8000280:	f000 ff92 	bl	80011a8 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800028a:	f000 fa8f 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fa00 	bl	80016ac <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b2:	f000 fa7b 	bl	80007ac <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	@ 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002de:	4b1f      	ldr	r3, [pc, #124]	@ (800035c <MX_TIM2_Init+0x9c>)
 80002e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6199;
 80002e6:	4b1d      	ldr	r3, [pc, #116]	@ (800035c <MX_TIM2_Init+0x9c>)
 80002e8:	f641 0237 	movw	r2, #6199	@ 0x1837
 80002ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ee:	4b1b      	ldr	r3, [pc, #108]	@ (800035c <MX_TIM2_Init+0x9c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002f4:	4b19      	ldr	r3, [pc, #100]	@ (800035c <MX_TIM2_Init+0x9c>)
 80002f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fc:	4b17      	ldr	r3, [pc, #92]	@ (800035c <MX_TIM2_Init+0x9c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000302:	4b16      	ldr	r3, [pc, #88]	@ (800035c <MX_TIM2_Init+0x9c>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000308:	4814      	ldr	r0, [pc, #80]	@ (800035c <MX_TIM2_Init+0x9c>)
 800030a:	f001 fb5d 	bl	80019c8 <HAL_TIM_Base_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000314:	f000 fa4a 	bl	80007ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	4619      	mov	r1, r3
 8000326:	480d      	ldr	r0, [pc, #52]	@ (800035c <MX_TIM2_Init+0x9c>)
 8000328:	f001 fc8d 	bl	8001c46 <HAL_TIM_SlaveConfigSynchro>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000332:	f000 fa3b 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4619      	mov	r1, r3
 8000342:	4806      	ldr	r0, [pc, #24]	@ (800035c <MX_TIM2_Init+0x9c>)
 8000344:	f001 fe6a 	bl	800201c <HAL_TIMEx_MasterConfigSynchronization>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800034e:	f000 fa2d 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	3720      	adds	r7, #32
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	2000002c 	.word	0x2000002c

08000360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000366:	4a12      	ldr	r2, [pc, #72]	@ (80003b0 <MX_USART1_UART_Init+0x50>)
 8000368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800036a:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 800036c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000398:	f001 feb0 	bl	80020fc <HAL_UART_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003a2:	f000 fa03 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000074 	.word	0x20000074
 80003b0:	40013800 	.word	0x40013800

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	@ 0x28
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0314 	add.w	r3, r7, #20
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b50      	ldr	r3, [pc, #320]	@ (800050c <MX_GPIO_Init+0x158>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a4f      	ldr	r2, [pc, #316]	@ (800050c <MX_GPIO_Init+0x158>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b4d      	ldr	r3, [pc, #308]	@ (800050c <MX_GPIO_Init+0x158>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	613b      	str	r3, [r7, #16]
 80003de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e0:	4b4a      	ldr	r3, [pc, #296]	@ (800050c <MX_GPIO_Init+0x158>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a49      	ldr	r2, [pc, #292]	@ (800050c <MX_GPIO_Init+0x158>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b47      	ldr	r3, [pc, #284]	@ (800050c <MX_GPIO_Init+0x158>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0320 	and.w	r3, r3, #32
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b44      	ldr	r3, [pc, #272]	@ (800050c <MX_GPIO_Init+0x158>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a43      	ldr	r2, [pc, #268]	@ (800050c <MX_GPIO_Init+0x158>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b41      	ldr	r3, [pc, #260]	@ (800050c <MX_GPIO_Init+0x158>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000410:	4b3e      	ldr	r3, [pc, #248]	@ (800050c <MX_GPIO_Init+0x158>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a3d      	ldr	r2, [pc, #244]	@ (800050c <MX_GPIO_Init+0x158>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b3b      	ldr	r3, [pc, #236]	@ (800050c <MX_GPIO_Init+0x158>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0308 	and.w	r3, r3, #8
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800042e:	4838      	ldr	r0, [pc, #224]	@ (8000510 <MX_GPIO_Init+0x15c>)
 8000430:	f000 fea2 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2103      	movs	r1, #3
 8000438:	4836      	ldr	r0, [pc, #216]	@ (8000514 <MX_GPIO_Init+0x160>)
 800043a:	f000 fe9d 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800043e:	2200      	movs	r2, #0
 8000440:	f649 11ff 	movw	r1, #39423	@ 0x99ff
 8000444:	4834      	ldr	r0, [pc, #208]	@ (8000518 <MX_GPIO_Init+0x164>)
 8000446:	f000 fe97 	bl	8001178 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800044a:	2200      	movs	r2, #0
 800044c:	f64f 413f 	movw	r1, #64575	@ 0xfc3f
 8000450:	4832      	ldr	r0, [pc, #200]	@ (800051c <MX_GPIO_Init+0x168>)
 8000452:	f000 fe91 	bl	8001178 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000456:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	4828      	ldr	r0, [pc, #160]	@ (8000510 <MX_GPIO_Init+0x15c>)
 8000470:	f000 fcfe 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000474:	2303      	movs	r3, #3
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2302      	movs	r3, #2
 8000482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4619      	mov	r1, r3
 800048a:	4822      	ldr	r0, [pc, #136]	@ (8000514 <MX_GPIO_Init+0x160>)
 800048c:	f000 fcf0 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000490:	f649 13ff 	movw	r3, #39423	@ 0x99ff
 8000494:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	f107 0314 	add.w	r3, r7, #20
 80004a6:	4619      	mov	r1, r3
 80004a8:	481b      	ldr	r0, [pc, #108]	@ (8000518 <MX_GPIO_Init+0x164>)
 80004aa:	f000 fce1 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80004ae:	f64f 433f 	movw	r3, #64575	@ 0xfc3f
 80004b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2302      	movs	r3, #2
 80004be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	4619      	mov	r1, r3
 80004c6:	4815      	ldr	r0, [pc, #84]	@ (800051c <MX_GPIO_Init+0x168>)
 80004c8:	f000 fcd2 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80004cc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	480e      	ldr	r0, [pc, #56]	@ (800051c <MX_GPIO_Init+0x168>)
 80004e2:	f000 fcc5 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80004e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <MX_GPIO_Init+0x16c>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80004ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004ee:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80004f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80004f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80004fc:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <MX_GPIO_Init+0x16c>)
 80004fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000502:	bf00      	nop
 8000504:	3728      	adds	r7, #40	@ 0x28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	40011000 	.word	0x40011000
 8000514:	40011400 	.word	0x40011400
 8000518:	40010800 	.word	0x40010800
 800051c:	40010c00 	.word	0x40010c00
 8000520:	40010000 	.word	0x40010000

08000524 <change_leds>:

/* USER CODE BEGIN 4 */
void change_leds(int times){
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < times; i++){
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e098      	b.n	8000664 <change_leds+0x140>
		GPIOB -> ODR ^= (1<<12);
 8000532:	4b52      	ldr	r3, [pc, #328]	@ (800067c <change_leds+0x158>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	4a51      	ldr	r2, [pc, #324]	@ (800067c <change_leds+0x158>)
 8000538:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800053c:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<0);
 800053e:	4b50      	ldr	r3, [pc, #320]	@ (8000680 <change_leds+0x15c>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a4f      	ldr	r2, [pc, #316]	@ (8000680 <change_leds+0x15c>)
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<13);
 800054a:	4b4c      	ldr	r3, [pc, #304]	@ (800067c <change_leds+0x158>)
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	4a4b      	ldr	r2, [pc, #300]	@ (800067c <change_leds+0x158>)
 8000550:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000554:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<1);
 8000556:	4b4a      	ldr	r3, [pc, #296]	@ (8000680 <change_leds+0x15c>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	4a49      	ldr	r2, [pc, #292]	@ (8000680 <change_leds+0x15c>)
 800055c:	f083 0302 	eor.w	r3, r3, #2
 8000560:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<14);
 8000562:	4b46      	ldr	r3, [pc, #280]	@ (800067c <change_leds+0x158>)
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	4a45      	ldr	r2, [pc, #276]	@ (800067c <change_leds+0x158>)
 8000568:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800056c:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<2);
 800056e:	4b44      	ldr	r3, [pc, #272]	@ (8000680 <change_leds+0x15c>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	4a43      	ldr	r2, [pc, #268]	@ (8000680 <change_leds+0x15c>)
 8000574:	f083 0304 	eor.w	r3, r3, #4
 8000578:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<15);
 800057a:	4b40      	ldr	r3, [pc, #256]	@ (800067c <change_leds+0x158>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	4a3f      	ldr	r2, [pc, #252]	@ (800067c <change_leds+0x158>)
 8000580:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 8000584:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<3);
 8000586:	4b3e      	ldr	r3, [pc, #248]	@ (8000680 <change_leds+0x15c>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	4a3d      	ldr	r2, [pc, #244]	@ (8000680 <change_leds+0x15c>)
 800058c:	f083 0308 	eor.w	r3, r3, #8
 8000590:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<8);
 8000592:	4b3b      	ldr	r3, [pc, #236]	@ (8000680 <change_leds+0x15c>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	4a3a      	ldr	r2, [pc, #232]	@ (8000680 <change_leds+0x15c>)
 8000598:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 800059c:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<4);
 800059e:	4b38      	ldr	r3, [pc, #224]	@ (8000680 <change_leds+0x15c>)
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	4a37      	ldr	r2, [pc, #220]	@ (8000680 <change_leds+0x15c>)
 80005a4:	f083 0310 	eor.w	r3, r3, #16
 80005a8:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<5);
 80005aa:	4b35      	ldr	r3, [pc, #212]	@ (8000680 <change_leds+0x15c>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4a34      	ldr	r2, [pc, #208]	@ (8000680 <change_leds+0x15c>)
 80005b0:	f083 0320 	eor.w	r3, r3, #32
 80005b4:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<6);
 80005b6:	4b32      	ldr	r3, [pc, #200]	@ (8000680 <change_leds+0x15c>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	4a31      	ldr	r2, [pc, #196]	@ (8000680 <change_leds+0x15c>)
 80005bc:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80005c0:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<11);
 80005c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <change_leds+0x15c>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000680 <change_leds+0x15c>)
 80005c8:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 80005cc:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<7);
 80005ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000680 <change_leds+0x15c>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000680 <change_leds+0x15c>)
 80005d4:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 80005d8:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<12);
 80005da:	4b29      	ldr	r3, [pc, #164]	@ (8000680 <change_leds+0x15c>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	4a28      	ldr	r2, [pc, #160]	@ (8000680 <change_leds+0x15c>)
 80005e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80005e4:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<0);
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <change_leds+0x158>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	4a24      	ldr	r2, [pc, #144]	@ (800067c <change_leds+0x158>)
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<13);
 80005f2:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <change_leds+0x15c>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a22      	ldr	r2, [pc, #136]	@ (8000680 <change_leds+0x15c>)
 80005f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80005fc:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<1);
 80005fe:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <change_leds+0x158>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4a1e      	ldr	r2, [pc, #120]	@ (800067c <change_leds+0x158>)
 8000604:	f083 0302 	eor.w	r3, r3, #2
 8000608:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<14);
 800060a:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <change_leds+0x15c>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	4a1c      	ldr	r2, [pc, #112]	@ (8000680 <change_leds+0x15c>)
 8000610:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8000614:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<10);
 8000616:	4b19      	ldr	r3, [pc, #100]	@ (800067c <change_leds+0x158>)
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	4a18      	ldr	r2, [pc, #96]	@ (800067c <change_leds+0x158>)
 800061c:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8000620:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<15);
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <change_leds+0x15c>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	4a16      	ldr	r2, [pc, #88]	@ (8000680 <change_leds+0x15c>)
 8000628:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 800062c:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<11);
 800062e:	4b13      	ldr	r3, [pc, #76]	@ (800067c <change_leds+0x158>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	4a12      	ldr	r2, [pc, #72]	@ (800067c <change_leds+0x158>)
 8000634:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 8000638:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<3);
 800063a:	4b10      	ldr	r3, [pc, #64]	@ (800067c <change_leds+0x158>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <change_leds+0x158>)
 8000640:	f083 0308 	eor.w	r3, r3, #8
 8000644:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<4);
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <change_leds+0x158>)
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <change_leds+0x158>)
 800064c:	f083 0310 	eor.w	r3, r3, #16
 8000650:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<5);
 8000652:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <change_leds+0x158>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	4a09      	ldr	r2, [pc, #36]	@ (800067c <change_leds+0x158>)
 8000658:	f083 0320 	eor.w	r3, r3, #32
 800065c:	60d3      	str	r3, [r2, #12]
	for(int i = 0; i < times; i++){
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	f6ff af62 	blt.w	8000532 <change_leds+0xe>
	}
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40010c00 	.word	0x40010c00
 8000680:	40010800 	.word	0x40010800

08000684 <collect_password>:
	int size = strlen(data);
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)data, (uint16_t*)size);
	check;
}
uint8_t password[]="000";
void collect_password(uint8_t num){
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	if(password[0]=='0'){
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <collect_password+0x44>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b30      	cmp	r3, #48	@ 0x30
 8000694:	d103      	bne.n	800069e <collect_password+0x1a>
		password[0]=num;
 8000696:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <collect_password+0x44>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	7013      	strb	r3, [r2, #0]
						password[2]=num;
					}
			}
	}

}
 800069c:	e00e      	b.n	80006bc <collect_password+0x38>
		if(password[1]=='0'){
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <collect_password+0x44>)
 80006a0:	785b      	ldrb	r3, [r3, #1]
 80006a2:	2b30      	cmp	r3, #48	@ 0x30
 80006a4:	d103      	bne.n	80006ae <collect_password+0x2a>
			password[1]=num;
 80006a6:	4a08      	ldr	r2, [pc, #32]	@ (80006c8 <collect_password+0x44>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	7053      	strb	r3, [r2, #1]
}
 80006ac:	e006      	b.n	80006bc <collect_password+0x38>
				if(password[2]=='0'){
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <collect_password+0x44>)
 80006b0:	789b      	ldrb	r3, [r3, #2]
 80006b2:	2b30      	cmp	r3, #48	@ 0x30
 80006b4:	d102      	bne.n	80006bc <collect_password+0x38>
						password[2]=num;
 80006b6:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <collect_password+0x44>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	7093      	strb	r3, [r2, #2]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000

080006cc <send_password>:
			}
	}

}*/

void send_password(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
	if(password[2]!='0'){
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <send_password+0x5c>)
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	2b30      	cmp	r3, #48	@ 0x30
 80006d8:	d022      	beq.n	8000720 <send_password+0x54>
		uint8_t data[6];
		/*for (int i=0; i<3; i++){
			data[i]=password[i];
		}*/
		 data[0] = password[0];
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <send_password+0x5c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	713b      	strb	r3, [r7, #4]
		 data[1] = password[1];
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <send_password+0x5c>)
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	717b      	strb	r3, [r7, #5]
		 data[2] = password[2];
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <send_password+0x5c>)
 80006e8:	789b      	ldrb	r3, [r3, #2]
 80006ea:	71bb      	strb	r3, [r7, #6]
		HAL_UART_Transmit_IT(&huart1, data, 3);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2203      	movs	r2, #3
 80006f0:	4619      	mov	r1, r3
 80006f2:	480e      	ldr	r0, [pc, #56]	@ (800072c <send_password+0x60>)
 80006f4:	f001 fd52 	bl	800219c <HAL_UART_Transmit_IT>
		for(int i=0; i<3; i++){
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	e007      	b.n	800070e <send_password+0x42>
			password[i]='0';
 80006fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <send_password+0x5c>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	2230      	movs	r2, #48	@ 0x30
 8000706:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<3; i++){
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3301      	adds	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b02      	cmp	r3, #2
 8000712:	ddf4      	ble.n	80006fe <send_password+0x32>
		}
	check;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <send_password+0x64>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a05      	ldr	r2, [pc, #20]	@ (8000730 <send_password+0x64>)
 800071a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800071e:	60d3      	str	r3, [r2, #12]
	}
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000
 800072c:	20000074 	.word	0x20000074
 8000730:	40011000 	.word	0x40011000

08000734 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a15      	ldr	r2, [pc, #84]	@ (8000798 <HAL_UART_RxCpltCallback+0x64>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d123      	bne.n	800078e <HAL_UART_RxCpltCallback+0x5a>
    {
    	//char itog[]={'q','w','e','r','t','y'}; - работает
    	//char itog[]="qwerty"; - тоже работает
    	if (memcmp("blink2", rx_data, sizeof(rx_data)) == 0)
 8000746:	2206      	movs	r2, #6
 8000748:	4914      	ldr	r1, [pc, #80]	@ (800079c <HAL_UART_RxCpltCallback+0x68>)
 800074a:	4815      	ldr	r0, [pc, #84]	@ (80007a0 <HAL_UART_RxCpltCallback+0x6c>)
 800074c:	f002 fa92 	bl	8002c74 <memcmp>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d108      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x34>
    	{
    		check;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <HAL_UART_RxCpltCallback+0x70>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <HAL_UART_RxCpltCallback+0x70>)
 800075c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000760:	60d3      	str	r3, [r2, #12]
    		change_leds(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fede 	bl	8000524 <change_leds>
            }
    	// очистка
    	for(int i = 0; i<sizeof(rx_data); i++){
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e007      	b.n	800077e <HAL_UART_RxCpltCallback+0x4a>
    		rx_data[i]='0';
 800076e:	4a0b      	ldr	r2, [pc, #44]	@ (800079c <HAL_UART_RxCpltCallback+0x68>)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	2230      	movs	r2, #48	@ 0x30
 8000776:	701a      	strb	r2, [r3, #0]
    	for(int i = 0; i<sizeof(rx_data); i++){
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2b05      	cmp	r3, #5
 8000782:	d9f4      	bls.n	800076e <HAL_UART_RxCpltCallback+0x3a>
    	}

        // Перезапускаем приёма
        HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, sizeof(rx_data));
 8000784:	2206      	movs	r2, #6
 8000786:	4905      	ldr	r1, [pc, #20]	@ (800079c <HAL_UART_RxCpltCallback+0x68>)
 8000788:	4807      	ldr	r0, [pc, #28]	@ (80007a8 <HAL_UART_RxCpltCallback+0x74>)
 800078a:	f001 fd3c 	bl	8002206 <HAL_UART_Receive_IT>

    }
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40013800 	.word	0x40013800
 800079c:	200000bc 	.word	0x200000bc
 80007a0:	08002d04 	.word	0x08002d04
 80007a4:	40011000 	.word	0x40011000
 80007a8:	20000074 	.word	0x20000074

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <Error_Handler+0x8>

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <HAL_MspInit+0x5c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a14      	ldr	r2, [pc, #80]	@ (8000814 <HAL_MspInit+0x5c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <HAL_MspInit+0x5c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <HAL_MspInit+0x5c>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a0e      	ldr	r2, [pc, #56]	@ (8000814 <HAL_MspInit+0x5c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <HAL_MspInit+0x5c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <HAL_MspInit+0x60>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <HAL_MspInit+0x60>)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40021000 	.word	0x40021000
 8000818:	40010000 	.word	0x40010000

0800081c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800082c:	d113      	bne.n	8000856 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <HAL_TIM_Base_MspInit+0x44>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <HAL_TIM_Base_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <HAL_TIM_Base_MspInit+0x44>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	201c      	movs	r0, #28
 800084c:	f000 fa27 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000850:	201c      	movs	r0, #28
 8000852:	f000 fa40 	bl	8000cd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a20      	ldr	r2, [pc, #128]	@ (8000900 <HAL_UART_MspInit+0x9c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d139      	bne.n	80008f8 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000884:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a1e      	ldr	r2, [pc, #120]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	480f      	ldr	r0, [pc, #60]	@ (8000908 <HAL_UART_MspInit+0xa4>)
 80008ca:	f000 fad1 	bl	8000e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	4809      	ldr	r0, [pc, #36]	@ (8000908 <HAL_UART_MspInit+0xa4>)
 80008e4:	f000 fac4 	bl	8000e70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2025      	movs	r0, #37	@ 0x25
 80008ee:	f000 f9d6 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008f2:	2025      	movs	r0, #37	@ 0x25
 80008f4:	f000 f9ef 	bl	8000cd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40013800 	.word	0x40013800
 8000904:	40021000 	.word	0x40021000
 8000908:	40010800 	.word	0x40010800

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <NMI_Handler+0x4>

08000914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <MemManage_Handler+0x4>

08000924 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <UsageFault_Handler+0x4>

08000934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f888 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000968:	4802      	ldr	r0, [pc, #8]	@ (8000974 <TIM2_IRQHandler+0x10>)
 800096a:	f001 f87c 	bl	8001a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000002c 	.word	0x2000002c

08000978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800097c:	4802      	ldr	r0, [pc, #8]	@ (8000988 <USART1_IRQHandler+0x10>)
 800097e:	f001 fc67 	bl	8002250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000074 	.word	0x20000074

0800098c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f7ff fff8 	bl	800098c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800099e:	490c      	ldr	r1, [pc, #48]	@ (80009d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009a0:	4a0c      	ldr	r2, [pc, #48]	@ (80009d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b4:	4c09      	ldr	r4, [pc, #36]	@ (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f002 f96f 	bl	8002ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fbc1 	bl	800014c <main>
  bx lr
 80009ca:	4770      	bx	lr
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009d4:	08002d40 	.word	0x08002d40
  ldr r2, =_sbss
 80009d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009dc:	200000c8 	.word	0x200000c8

080009e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_2_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_Init+0x28>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_Init+0x28>)
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f947 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	200f      	movs	r0, #15
 80009fc:	f000 f808 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff feda 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40022000 	.word	0x40022000

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_InitTick+0x54>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_InitTick+0x58>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f95f 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00e      	b.n	8000a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d80a      	bhi.n	8000a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f927 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a50:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <HAL_InitTick+0x5c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000004 	.word	0x20000004
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	20000008 	.word	0x20000008

08000a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <HAL_IncTick+0x1c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_IncTick+0x20>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a03      	ldr	r2, [pc, #12]	@ (8000a90 <HAL_IncTick+0x20>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	200000c4 	.word	0x200000c4

08000a94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b02      	ldr	r3, [pc, #8]	@ (8000aa4 <HAL_GetTick+0x10>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	200000c4 	.word	0x200000c4

08000aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab0:	f7ff fff0 	bl	8000a94 <HAL_GetTick>
 8000ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac0:	d005      	beq.n	8000ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <HAL_Delay+0x44>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ace:	bf00      	nop
 8000ad0:	f7ff ffe0 	bl	8000a94 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d8f7      	bhi.n	8000ad0 <HAL_Delay+0x28>
  {
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000000c 	.word	0x2000000c

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	@ (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4906      	ldr	r1, [pc, #24]	@ (8000b88 <__NVIC_EnableIRQ+0x34>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff90 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff2d 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff42 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff90 	bl	8000be0 <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5f 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff35 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffa2 	bl	8000c44 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d008      	beq.n	8000d34 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2204      	movs	r2, #4
 8000d26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e020      	b.n	8000d76 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 020e 	bic.w	r2, r2, #14
 8000d42:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0201 	bic.w	r2, r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d005      	beq.n	8000da4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e051      	b.n	8000e48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 020e 	bic.w	r2, r2, #14
 8000db2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 0201 	bic.w	r2, r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a22      	ldr	r2, [pc, #136]	@ (8000e54 <HAL_DMA_Abort_IT+0xd4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d029      	beq.n	8000e22 <HAL_DMA_Abort_IT+0xa2>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a21      	ldr	r2, [pc, #132]	@ (8000e58 <HAL_DMA_Abort_IT+0xd8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d022      	beq.n	8000e1e <HAL_DMA_Abort_IT+0x9e>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e5c <HAL_DMA_Abort_IT+0xdc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d01a      	beq.n	8000e18 <HAL_DMA_Abort_IT+0x98>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e60 <HAL_DMA_Abort_IT+0xe0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d012      	beq.n	8000e12 <HAL_DMA_Abort_IT+0x92>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e64 <HAL_DMA_Abort_IT+0xe4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d00a      	beq.n	8000e0c <HAL_DMA_Abort_IT+0x8c>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <HAL_DMA_Abort_IT+0xe8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d102      	bne.n	8000e06 <HAL_DMA_Abort_IT+0x86>
 8000e00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e04:	e00e      	b.n	8000e24 <HAL_DMA_Abort_IT+0xa4>
 8000e06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e0a:	e00b      	b.n	8000e24 <HAL_DMA_Abort_IT+0xa4>
 8000e0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e10:	e008      	b.n	8000e24 <HAL_DMA_Abort_IT+0xa4>
 8000e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e16:	e005      	b.n	8000e24 <HAL_DMA_Abort_IT+0xa4>
 8000e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1c:	e002      	b.n	8000e24 <HAL_DMA_Abort_IT+0xa4>
 8000e1e:	2310      	movs	r3, #16
 8000e20:	e000      	b.n	8000e24 <HAL_DMA_Abort_IT+0xa4>
 8000e22:	2301      	movs	r3, #1
 8000e24:	4a11      	ldr	r2, [pc, #68]	@ (8000e6c <HAL_DMA_Abort_IT+0xec>)
 8000e26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	4798      	blx	r3
    } 
  }
  return status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40020008 	.word	0x40020008
 8000e58:	4002001c 	.word	0x4002001c
 8000e5c:	40020030 	.word	0x40020030
 8000e60:	40020044 	.word	0x40020044
 8000e64:	40020058 	.word	0x40020058
 8000e68:	4002006c 	.word	0x4002006c
 8000e6c:	40020000 	.word	0x40020000

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b08b      	sub	sp, #44	@ 0x2c
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e169      	b.n	8001158 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e84:	2201      	movs	r2, #1
 8000e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8158 	bne.w	8001152 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4a9a      	ldr	r2, [pc, #616]	@ (8001110 <HAL_GPIO_Init+0x2a0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d05e      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eac:	4a98      	ldr	r2, [pc, #608]	@ (8001110 <HAL_GPIO_Init+0x2a0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d875      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eb2:	4a98      	ldr	r2, [pc, #608]	@ (8001114 <HAL_GPIO_Init+0x2a4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d058      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eb8:	4a96      	ldr	r2, [pc, #600]	@ (8001114 <HAL_GPIO_Init+0x2a4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d86f      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ebe:	4a96      	ldr	r2, [pc, #600]	@ (8001118 <HAL_GPIO_Init+0x2a8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d052      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ec4:	4a94      	ldr	r2, [pc, #592]	@ (8001118 <HAL_GPIO_Init+0x2a8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d869      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eca:	4a94      	ldr	r2, [pc, #592]	@ (800111c <HAL_GPIO_Init+0x2ac>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d04c      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ed0:	4a92      	ldr	r2, [pc, #584]	@ (800111c <HAL_GPIO_Init+0x2ac>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d863      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ed6:	4a92      	ldr	r2, [pc, #584]	@ (8001120 <HAL_GPIO_Init+0x2b0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d046      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000edc:	4a90      	ldr	r2, [pc, #576]	@ (8001120 <HAL_GPIO_Init+0x2b0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d85d      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d82a      	bhi.n	8000f3c <HAL_GPIO_Init+0xcc>
 8000ee6:	2b12      	cmp	r3, #18
 8000ee8:	d859      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eea:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef0 <HAL_GPIO_Init+0x80>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f6b 	.word	0x08000f6b
 8000ef4:	08000f45 	.word	0x08000f45
 8000ef8:	08000f57 	.word	0x08000f57
 8000efc:	08000f99 	.word	0x08000f99
 8000f00:	08000f9f 	.word	0x08000f9f
 8000f04:	08000f9f 	.word	0x08000f9f
 8000f08:	08000f9f 	.word	0x08000f9f
 8000f0c:	08000f9f 	.word	0x08000f9f
 8000f10:	08000f9f 	.word	0x08000f9f
 8000f14:	08000f9f 	.word	0x08000f9f
 8000f18:	08000f9f 	.word	0x08000f9f
 8000f1c:	08000f9f 	.word	0x08000f9f
 8000f20:	08000f9f 	.word	0x08000f9f
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f9f 	.word	0x08000f9f
 8000f2c:	08000f9f 	.word	0x08000f9f
 8000f30:	08000f9f 	.word	0x08000f9f
 8000f34:	08000f4d 	.word	0x08000f4d
 8000f38:	08000f61 	.word	0x08000f61
 8000f3c:	4a79      	ldr	r2, [pc, #484]	@ (8001124 <HAL_GPIO_Init+0x2b4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f42:	e02c      	b.n	8000f9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e029      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e024      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e01f      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	330c      	adds	r3, #12
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e01a      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f72:	2304      	movs	r3, #4
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e013      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d105      	bne.n	8000f8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f80:	2308      	movs	r3, #8
 8000f82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	611a      	str	r2, [r3, #16]
          break;
 8000f8a:	e009      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	615a      	str	r2, [r3, #20]
          break;
 8000f96:	e003      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          break;
 8000f9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2bff      	cmp	r3, #255	@ 0xff
 8000fa4:	d801      	bhi.n	8000faa <HAL_GPIO_Init+0x13a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	e001      	b.n	8000fae <HAL_GPIO_Init+0x13e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2bff      	cmp	r3, #255	@ 0xff
 8000fb4:	d802      	bhi.n	8000fbc <HAL_GPIO_Init+0x14c>
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x152>
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbe:	3b08      	subs	r3, #8
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	210f      	movs	r1, #15
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	6a39      	ldr	r1, [r7, #32]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80b1 	beq.w	8001152 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001008:	4a48      	ldr	r2, [pc, #288]	@ (800112c <HAL_GPIO_Init+0x2bc>)
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a40      	ldr	r2, [pc, #256]	@ (8001130 <HAL_GPIO_Init+0x2c0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d013      	beq.n	800105c <HAL_GPIO_Init+0x1ec>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a3f      	ldr	r2, [pc, #252]	@ (8001134 <HAL_GPIO_Init+0x2c4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d00d      	beq.n	8001058 <HAL_GPIO_Init+0x1e8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a3e      	ldr	r2, [pc, #248]	@ (8001138 <HAL_GPIO_Init+0x2c8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x1e4>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a3d      	ldr	r2, [pc, #244]	@ (800113c <HAL_GPIO_Init+0x2cc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_GPIO_Init+0x1e0>
 800104c:	2303      	movs	r3, #3
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 8001050:	2304      	movs	r3, #4
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 800105c:	2300      	movs	r3, #0
 800105e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800106e:	492f      	ldr	r1, [pc, #188]	@ (800112c <HAL_GPIO_Init+0x2bc>)
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	492c      	ldr	r1, [pc, #176]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	608b      	str	r3, [r1, #8]
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001096:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	43db      	mvns	r3, r3
 800109e:	4928      	ldr	r1, [pc, #160]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010b0:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	4922      	ldr	r1, [pc, #136]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60cb      	str	r3, [r1, #12]
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	491e      	ldr	r1, [pc, #120]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4918      	ldr	r1, [pc, #96]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4914      	ldr	r1, [pc, #80]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d021      	beq.n	8001144 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	490e      	ldr	r1, [pc, #56]	@ (8001140 <HAL_GPIO_Init+0x2d0>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	600b      	str	r3, [r1, #0]
 800110c:	e021      	b.n	8001152 <HAL_GPIO_Init+0x2e2>
 800110e:	bf00      	nop
 8001110:	10320000 	.word	0x10320000
 8001114:	10310000 	.word	0x10310000
 8001118:	10220000 	.word	0x10220000
 800111c:	10210000 	.word	0x10210000
 8001120:	10120000 	.word	0x10120000
 8001124:	10110000 	.word	0x10110000
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	40010800 	.word	0x40010800
 8001134:	40010c00 	.word	0x40010c00
 8001138:	40011000 	.word	0x40011000
 800113c:	40011400 	.word	0x40011400
 8001140:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_GPIO_Init+0x304>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	43db      	mvns	r3, r3
 800114c:	4909      	ldr	r1, [pc, #36]	@ (8001174 <HAL_GPIO_Init+0x304>)
 800114e:	4013      	ands	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	3301      	adds	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	fa22 f303 	lsr.w	r3, r2, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	f47f ae8e 	bne.w	8000e84 <HAL_GPIO_Init+0x14>
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	372c      	adds	r7, #44	@ 0x2c
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001194:	e003      	b.n	800119e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	611a      	str	r2, [r3, #16]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e272      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 8087 	beq.w	80012d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c8:	4b92      	ldr	r3, [pc, #584]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d00c      	beq.n	80011ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d112      	bne.n	8001206 <HAL_RCC_OscConfig+0x5e>
 80011e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ec:	d10b      	bne.n	8001206 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ee:	4b89      	ldr	r3, [pc, #548]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d06c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x12c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d168      	bne.n	80012d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e24c      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800120e:	d106      	bne.n	800121e <HAL_RCC_OscConfig+0x76>
 8001210:	4b80      	ldr	r3, [pc, #512]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a7f      	ldr	r2, [pc, #508]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	e02e      	b.n	800127c <HAL_RCC_OscConfig+0xd4>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x98>
 8001226:	4b7b      	ldr	r3, [pc, #492]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a7a      	ldr	r2, [pc, #488]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 800122c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b78      	ldr	r3, [pc, #480]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a77      	ldr	r2, [pc, #476]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001238:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e01d      	b.n	800127c <HAL_RCC_OscConfig+0xd4>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0xbc>
 800124a:	4b72      	ldr	r3, [pc, #456]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a71      	ldr	r2, [pc, #452]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b6f      	ldr	r3, [pc, #444]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6e      	ldr	r2, [pc, #440]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0xd4>
 8001264:	4b6b      	ldr	r3, [pc, #428]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a6a      	ldr	r2, [pc, #424]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b68      	ldr	r3, [pc, #416]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a67      	ldr	r2, [pc, #412]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fc06 	bl	8000a94 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fc02 	bl	8000a94 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	@ 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e200      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	4b5d      	ldr	r3, [pc, #372]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0xe4>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fbf2 	bl	8000a94 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fbee 	bl	8000a94 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	@ 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1ec      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	4b53      	ldr	r3, [pc, #332]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x10c>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d063      	beq.n	80013aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ee:	4b49      	ldr	r3, [pc, #292]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d11c      	bne.n	8001334 <HAL_RCC_OscConfig+0x18c>
 80012fa:	4b46      	ldr	r3, [pc, #280]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d116      	bne.n	8001334 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	4b43      	ldr	r3, [pc, #268]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <HAL_RCC_OscConfig+0x176>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e1c0      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b3d      	ldr	r3, [pc, #244]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4939      	ldr	r1, [pc, #228]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001332:	e03a      	b.n	80013aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d020      	beq.n	800137e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133c:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <HAL_RCC_OscConfig+0x270>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001342:	f7ff fba7 	bl	8000a94 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134a:	f7ff fba3 	bl	8000a94 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e1a1      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4927      	ldr	r1, [pc, #156]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
 800137c:	e015      	b.n	80013aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <HAL_RCC_OscConfig+0x270>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fb86 	bl	8000a94 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fb82 	bl	8000a94 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e180      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03a      	beq.n	800142c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d019      	beq.n	80013f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <HAL_RCC_OscConfig+0x274>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fb66 	bl	8000a94 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fb62 	bl	8000a94 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e160      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f000 face 	bl	800198c <RCC_Delay>
 80013f0:	e01c      	b.n	800142c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_RCC_OscConfig+0x274>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f8:	f7ff fb4c 	bl	8000a94 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fe:	e00f      	b.n	8001420 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fb48 	bl	8000a94 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d908      	bls.n	8001420 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e146      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	42420000 	.word	0x42420000
 800141c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	4b92      	ldr	r3, [pc, #584]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1e9      	bne.n	8001400 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a6 	beq.w	8001586 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143e:	4b8b      	ldr	r3, [pc, #556]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b88      	ldr	r3, [pc, #544]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a87      	ldr	r2, [pc, #540]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b85      	ldr	r3, [pc, #532]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b82      	ldr	r3, [pc, #520]	@ (8001670 <HAL_RCC_OscConfig+0x4c8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b7f      	ldr	r3, [pc, #508]	@ (8001670 <HAL_RCC_OscConfig+0x4c8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7e      	ldr	r2, [pc, #504]	@ (8001670 <HAL_RCC_OscConfig+0x4c8>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fb09 	bl	8000a94 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff fb05 	bl	8000a94 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	@ 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e103      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b75      	ldr	r3, [pc, #468]	@ (8001670 <HAL_RCC_OscConfig+0x4c8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x312>
 80014ac:	4b6f      	ldr	r3, [pc, #444]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a6e      	ldr	r2, [pc, #440]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	e02d      	b.n	8001516 <HAL_RCC_OscConfig+0x36e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x334>
 80014c2:	4b6a      	ldr	r3, [pc, #424]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a69      	ldr	r2, [pc, #420]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	6213      	str	r3, [r2, #32]
 80014ce:	4b67      	ldr	r3, [pc, #412]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a66      	ldr	r2, [pc, #408]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	6213      	str	r3, [r2, #32]
 80014da:	e01c      	b.n	8001516 <HAL_RCC_OscConfig+0x36e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d10c      	bne.n	80014fe <HAL_RCC_OscConfig+0x356>
 80014e4:	4b61      	ldr	r3, [pc, #388]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a60      	ldr	r2, [pc, #384]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	4b5e      	ldr	r3, [pc, #376]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a5d      	ldr	r2, [pc, #372]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	e00b      	b.n	8001516 <HAL_RCC_OscConfig+0x36e>
 80014fe:	4b5b      	ldr	r3, [pc, #364]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a5a      	ldr	r2, [pc, #360]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	4b58      	ldr	r3, [pc, #352]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a57      	ldr	r2, [pc, #348]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d015      	beq.n	800154a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fab9 	bl	8000a94 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff fab5 	bl	8000a94 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0b1      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153c:	4b4b      	ldr	r3, [pc, #300]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0ee      	beq.n	8001526 <HAL_RCC_OscConfig+0x37e>
 8001548:	e014      	b.n	8001574 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff faa3 	bl	8000a94 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7ff fa9f 	bl	8000a94 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e09b      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001568:	4b40      	ldr	r3, [pc, #256]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ee      	bne.n	8001552 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d105      	bne.n	8001586 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800157a:	4b3c      	ldr	r3, [pc, #240]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a3b      	ldr	r2, [pc, #236]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8087 	beq.w	800169e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001590:	4b36      	ldr	r3, [pc, #216]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b08      	cmp	r3, #8
 800159a:	d061      	beq.n	8001660 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d146      	bne.n	8001632 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a4:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <HAL_RCC_OscConfig+0x4cc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa73 	bl	8000a94 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff fa6f 	bl	8000a94 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e06d      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c4:	4b29      	ldr	r3, [pc, #164]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d8:	d108      	bne.n	80015ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4921      	ldr	r1, [pc, #132]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a19      	ldr	r1, [r3, #32]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fc:	430b      	orrs	r3, r1
 80015fe:	491b      	ldr	r1, [pc, #108]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fa43 	bl	8000a94 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff fa3f 	bl	8000a94 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e03d      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x46a>
 8001630:	e035      	b.n	800169e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <HAL_RCC_OscConfig+0x4cc>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fa2c 	bl	8000a94 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fa28 	bl	8000a94 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e026      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x498>
 800165e:	e01e      	b.n	800169e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d107      	bne.n	8001678 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e019      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
 800166c:	40021000 	.word	0x40021000
 8001670:	40007000 	.word	0x40007000
 8001674:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <HAL_RCC_OscConfig+0x500>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	429a      	cmp	r2, r3
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0d0      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c0:	4b6a      	ldr	r3, [pc, #424]	@ (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d910      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b67      	ldr	r3, [pc, #412]	@ (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 0207 	bic.w	r2, r3, #7
 80016d6:	4965      	ldr	r1, [pc, #404]	@ (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b63      	ldr	r3, [pc, #396]	@ (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0b8      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001708:	4b59      	ldr	r3, [pc, #356]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a58      	ldr	r2, [pc, #352]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001712:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001720:	4b53      	ldr	r3, [pc, #332]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a52      	ldr	r2, [pc, #328]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800172a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172c:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	494d      	ldr	r1, [pc, #308]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d040      	beq.n	80017cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d115      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e07f      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b41      	ldr	r3, [pc, #260]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e073      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177a:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06b      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178a:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f023 0203 	bic.w	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4936      	ldr	r1, [pc, #216]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800179c:	f7ff f97a 	bl	8000a94 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a4:	f7ff f976 	bl	8000a94 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e053      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 020c 	and.w	r2, r3, #12
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d1eb      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017cc:	4b27      	ldr	r3, [pc, #156]	@ (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d210      	bcs.n	80017fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b24      	ldr	r3, [pc, #144]	@ (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 0207 	bic.w	r2, r3, #7
 80017e2:	4922      	ldr	r1, [pc, #136]	@ (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b20      	ldr	r3, [pc, #128]	@ (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e032      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4916      	ldr	r1, [pc, #88]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	490e      	ldr	r1, [pc, #56]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800183a:	f000 f821 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 800183e:	4602      	mov	r2, r0
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	490a      	ldr	r1, [pc, #40]	@ (8001874 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	5ccb      	ldrb	r3, [r1, r3]
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <HAL_RCC_ClockConfig+0x1cc>)
 8001854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <HAL_RCC_ClockConfig+0x1d0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f8d8 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000
 8001870:	40021000 	.word	0x40021000
 8001874:	08002d0c 	.word	0x08002d0c
 8001878:	20000004 	.word	0x20000004
 800187c:	20000008 	.word	0x20000008

08001880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800189a:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x94>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d002      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x30>
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0x36>
 80018ae:	e027      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x98>)
 80018b2:	613b      	str	r3, [r7, #16]
      break;
 80018b4:	e027      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	0c9b      	lsrs	r3, r3, #18
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d010      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x94>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	0c5b      	lsrs	r3, r3, #17
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	4a11      	ldr	r2, [pc, #68]	@ (8001920 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x98>)
 80018e2:	fb03 f202 	mul.w	r2, r3, r2
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e004      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	613b      	str	r3, [r7, #16]
      break;
 80018fe:	e002      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x98>)
 8001902:	613b      	str	r3, [r7, #16]
      break;
 8001904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001906:	693b      	ldr	r3, [r7, #16]
}
 8001908:	4618      	mov	r0, r3
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	007a1200 	.word	0x007a1200
 800191c:	08002d24 	.word	0x08002d24
 8001920:	08002d34 	.word	0x08002d34
 8001924:	003d0900 	.word	0x003d0900

08001928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b02      	ldr	r3, [pc, #8]	@ (8001938 <HAL_RCC_GetHCLKFreq+0x10>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001940:	f7ff fff2 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	4903      	ldr	r1, [pc, #12]	@ (8001960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001952:	5ccb      	ldrb	r3, [r1, r3]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	08002d1c 	.word	0x08002d1c

08001964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001968:	f7ff ffde 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	0adb      	lsrs	r3, r3, #11
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4903      	ldr	r1, [pc, #12]	@ (8001988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	08002d1c 	.word	0x08002d1c

0800198c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001994:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <RCC_Delay+0x34>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <RCC_Delay+0x38>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0a5b      	lsrs	r3, r3, #9
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a8:	bf00      	nop
  }
  while (Delay --);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1e5a      	subs	r2, r3, #1
 80019ae:	60fa      	str	r2, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f9      	bne.n	80019a8 <RCC_Delay+0x1c>
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000004 	.word	0x20000004
 80019c4:	10624dd3 	.word	0x10624dd3

080019c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e041      	b.n	8001a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe ff14 	bl	800081c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f000 f98c 	bl	8001d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01b      	beq.n	8001aca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f06f 0202 	mvn.w	r2, #2
 8001a9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f91c 	bl	8001cee <HAL_TIM_IC_CaptureCallback>
 8001ab6:	e005      	b.n	8001ac4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f90f 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f91e 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d01b      	beq.n	8001b16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f06f 0204 	mvn.w	r2, #4
 8001ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f8f6 	bl	8001cee <HAL_TIM_IC_CaptureCallback>
 8001b02:	e005      	b.n	8001b10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f8e9 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f8f8 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01b      	beq.n	8001b62 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f06f 0208 	mvn.w	r2, #8
 8001b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2204      	movs	r2, #4
 8001b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f8d0 	bl	8001cee <HAL_TIM_IC_CaptureCallback>
 8001b4e:	e005      	b.n	8001b5c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8c3 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8d2 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01b      	beq.n	8001bae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0210 	mvn.w	r2, #16
 8001b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2208      	movs	r2, #8
 8001b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8aa 	bl	8001cee <HAL_TIM_IC_CaptureCallback>
 8001b9a:	e005      	b.n	8001ba8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f89d 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8ac 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00c      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f06f 0201 	mvn.w	r2, #1
 8001bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f87c 	bl	8001cca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00c      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fa7a 	bl	80020ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f87c 	bl	8001d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00c      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 0220 	mvn.w	r2, #32
 8001c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fa4d 	bl	80020d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_TIM_SlaveConfigSynchro+0x18>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e031      	b.n	8001cc2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8c5 	bl	8001e00 <TIM_SlaveTimer_SetConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e018      	b.n	8001cc2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a2f      	ldr	r2, [pc, #188]	@ (8001df4 <TIM_Base_SetConfig+0xd0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00b      	beq.n	8001d54 <TIM_Base_SetConfig+0x30>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d42:	d007      	beq.n	8001d54 <TIM_Base_SetConfig+0x30>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a2c      	ldr	r2, [pc, #176]	@ (8001df8 <TIM_Base_SetConfig+0xd4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d003      	beq.n	8001d54 <TIM_Base_SetConfig+0x30>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001dfc <TIM_Base_SetConfig+0xd8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d108      	bne.n	8001d66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a22      	ldr	r2, [pc, #136]	@ (8001df4 <TIM_Base_SetConfig+0xd0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00b      	beq.n	8001d86 <TIM_Base_SetConfig+0x62>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d74:	d007      	beq.n	8001d86 <TIM_Base_SetConfig+0x62>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	@ (8001df8 <TIM_Base_SetConfig+0xd4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <TIM_Base_SetConfig+0x62>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <TIM_Base_SetConfig+0xd8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <TIM_Base_SetConfig+0xd0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d103      	bne.n	8001dcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f023 0201 	bic.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]
  }
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40012c00 	.word	0x40012c00
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40000800 	.word	0x40000800

08001e00 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e1c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f023 0307 	bic.w	r3, r3, #7
 8001e2e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b70      	cmp	r3, #112	@ 0x70
 8001e48:	d01a      	beq.n	8001e80 <TIM_SlaveTimer_SetConfig+0x80>
 8001e4a:	2b70      	cmp	r3, #112	@ 0x70
 8001e4c:	d860      	bhi.n	8001f10 <TIM_SlaveTimer_SetConfig+0x110>
 8001e4e:	2b60      	cmp	r3, #96	@ 0x60
 8001e50:	d054      	beq.n	8001efc <TIM_SlaveTimer_SetConfig+0xfc>
 8001e52:	2b60      	cmp	r3, #96	@ 0x60
 8001e54:	d85c      	bhi.n	8001f10 <TIM_SlaveTimer_SetConfig+0x110>
 8001e56:	2b50      	cmp	r3, #80	@ 0x50
 8001e58:	d046      	beq.n	8001ee8 <TIM_SlaveTimer_SetConfig+0xe8>
 8001e5a:	2b50      	cmp	r3, #80	@ 0x50
 8001e5c:	d858      	bhi.n	8001f10 <TIM_SlaveTimer_SetConfig+0x110>
 8001e5e:	2b40      	cmp	r3, #64	@ 0x40
 8001e60:	d019      	beq.n	8001e96 <TIM_SlaveTimer_SetConfig+0x96>
 8001e62:	2b40      	cmp	r3, #64	@ 0x40
 8001e64:	d854      	bhi.n	8001f10 <TIM_SlaveTimer_SetConfig+0x110>
 8001e66:	2b30      	cmp	r3, #48	@ 0x30
 8001e68:	d055      	beq.n	8001f16 <TIM_SlaveTimer_SetConfig+0x116>
 8001e6a:	2b30      	cmp	r3, #48	@ 0x30
 8001e6c:	d850      	bhi.n	8001f10 <TIM_SlaveTimer_SetConfig+0x110>
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d051      	beq.n	8001f16 <TIM_SlaveTimer_SetConfig+0x116>
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d84c      	bhi.n	8001f10 <TIM_SlaveTimer_SetConfig+0x110>
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d04d      	beq.n	8001f16 <TIM_SlaveTimer_SetConfig+0x116>
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d04b      	beq.n	8001f16 <TIM_SlaveTimer_SetConfig+0x116>
 8001e7e:	e047      	b.n	8001f10 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8001e90:	f000 f8a4 	bl	8001fdc <TIM_ETR_SetConfig>
      break;
 8001e94:	e040      	b.n	8001f18 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d101      	bne.n	8001ea2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e03b      	b.n	8001f1a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ec8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	621a      	str	r2, [r3, #32]
      break;
 8001ee6:	e017      	b.n	8001f18 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f000 f814 	bl	8001f22 <TIM_TI1_ConfigInputStage>
      break;
 8001efa:	e00d      	b.n	8001f18 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f000 f838 	bl	8001f7e <TIM_TI2_ConfigInputStage>
      break;
 8001f0e:	e003      	b.n	8001f18 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	75fb      	strb	r3, [r7, #23]
      break;
 8001f14:	e000      	b.n	8001f18 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8001f16:	bf00      	nop
  }

  return status;
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b087      	sub	sp, #28
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f023 0201 	bic.w	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f023 030a 	bic.w	r3, r3, #10
 8001f5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	621a      	str	r2, [r3, #32]
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b087      	sub	sp, #28
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f023 0210 	bic.w	r2, r3, #16
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	031b      	lsls	r3, r3, #12
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001fba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	621a      	str	r2, [r3, #32]
}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	021a      	lsls	r2, r3, #8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4313      	orrs	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	609a      	str	r2, [r3, #8]
}
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
	...

0800201c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002030:	2302      	movs	r3, #2
 8002032:	e046      	b.n	80020c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800205a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a16      	ldr	r2, [pc, #88]	@ (80020cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00e      	beq.n	8002096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002080:	d009      	beq.n	8002096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d004      	beq.n	8002096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a10      	ldr	r2, [pc, #64]	@ (80020d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10c      	bne.n	80020b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800209c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800

080020d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e042      	b.n	8002194 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fb9e 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2224      	movs	r2, #36	@ 0x24
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800213e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fd09 	bl	8002b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d121      	bne.n	80021fa <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_UART_Transmit_IT+0x26>
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e01a      	b.n	80021fc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2221      	movs	r2, #33	@ 0x21
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	4613      	mov	r3, r2
 8002212:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b20      	cmp	r3, #32
 800221e:	d112      	bne.n	8002246 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_UART_Receive_IT+0x26>
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e00b      	b.n	8002248 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	461a      	mov	r2, r3
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fab6 	bl	80027ae <UART_Start_Receive_IT>
 8002242:	4603      	mov	r3, r0
 8002244:	e000      	b.n	8002248 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0ba      	sub	sp, #232	@ 0xe8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800228e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_UART_IRQHandler+0x66>
 80022a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fb93 	bl	80029da <UART_Receive_IT>
      return;
 80022b4:	e25b      	b.n	800276e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80de 	beq.w	800247c <HAL_UART_IRQHandler+0x22c>
 80022c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80d1 	beq.w	800247c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_UART_IRQHandler+0xae>
 80022e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_UART_IRQHandler+0xd2>
 800230a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f043 0202 	orr.w	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_UART_IRQHandler+0xf6>
 800232e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	f043 0204 	orr.w	r2, r3, #4
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d011      	beq.n	8002376 <HAL_UART_IRQHandler+0x126>
 8002352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800235e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f043 0208 	orr.w	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 81f2 	beq.w	8002764 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_UART_IRQHandler+0x14e>
 800238c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fb1e 	bl	80029da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf14      	ite	ne
 80023ac:	2301      	movne	r3, #1
 80023ae:	2300      	moveq	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d103      	bne.n	80023ca <HAL_UART_IRQHandler+0x17a>
 80023c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d04f      	beq.n	800246a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa28 	bl	8002820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d041      	beq.n	8002462 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3314      	adds	r3, #20
 80023e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80023f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3314      	adds	r3, #20
 8002406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800240a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800240e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800241a:	e841 2300 	strex	r3, r2, [r1]
 800241e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1d9      	bne.n	80023de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d013      	beq.n	800245a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002436:	4a7e      	ldr	r2, [pc, #504]	@ (8002630 <HAL_UART_IRQHandler+0x3e0>)
 8002438:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fc9e 	bl	8000d80 <HAL_DMA_Abort_IT>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002454:	4610      	mov	r0, r2
 8002456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002458:	e00e      	b.n	8002478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f993 	bl	8002786 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002460:	e00a      	b.n	8002478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f98f 	bl	8002786 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002468:	e006      	b.n	8002478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f98b 	bl	8002786 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002476:	e175      	b.n	8002764 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002478:	bf00      	nop
    return;
 800247a:	e173      	b.n	8002764 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	2b01      	cmp	r3, #1
 8002482:	f040 814f 	bne.w	8002724 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8148 	beq.w	8002724 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8141 	beq.w	8002724 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80b6 	beq.w	8002634 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8145 	beq.w	8002768 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024e6:	429a      	cmp	r2, r3
 80024e8:	f080 813e 	bcs.w	8002768 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	f000 8088 	beq.w	8002610 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800250e:	e853 3f00 	ldrex	r3, [r3]
 8002512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002516:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800251a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800251e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800252c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002530:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002534:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002538:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800253c:	e841 2300 	strex	r3, r2, [r1]
 8002540:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002544:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1d9      	bne.n	8002500 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3314      	adds	r3, #20
 8002552:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002554:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002556:	e853 3f00 	ldrex	r3, [r3]
 800255a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800255c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3314      	adds	r3, #20
 800256c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002570:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002574:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002576:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002578:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800257c:	e841 2300 	strex	r3, r2, [r1]
 8002580:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002582:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e1      	bne.n	800254c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3314      	adds	r3, #20
 800258e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002590:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002592:	e853 3f00 	ldrex	r3, [r3]
 8002596:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800259a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800259e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3314      	adds	r3, #20
 80025a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80025ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80025b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80025b4:	e841 2300 	strex	r3, r2, [r1]
 80025b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80025ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e3      	bne.n	8002588 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025d8:	e853 3f00 	ldrex	r3, [r3]
 80025dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025e0:	f023 0310 	bic.w	r3, r3, #16
 80025e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80025f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025fa:	e841 2300 	strex	r3, r2, [r1]
 80025fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e3      	bne.n	80025ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fb7d 	bl	8000d0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800261e:	b29b      	uxth	r3, r3
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	b29b      	uxth	r3, r3
 8002624:	4619      	mov	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8b6 	bl	8002798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800262c:	e09c      	b.n	8002768 <HAL_UART_IRQHandler+0x518>
 800262e:	bf00      	nop
 8002630:	080028e5 	.word	0x080028e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800263c:	b29b      	uxth	r3, r3
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 808e 	beq.w	800276c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8089 	beq.w	800276c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800266a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002670:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800267e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002680:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002682:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002686:	e841 2300 	strex	r3, r2, [r1]
 800268a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800268c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e3      	bne.n	800265a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3314      	adds	r3, #20
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	e853 3f00 	ldrex	r3, [r3]
 80026a0:	623b      	str	r3, [r7, #32]
   return(result);
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3314      	adds	r3, #20
 80026b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80026b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026be:	e841 2300 	strex	r3, r2, [r1]
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e3      	bne.n	8002692 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	330c      	adds	r3, #12
 80026de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	e853 3f00 	ldrex	r3, [r3]
 80026e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0310 	bic.w	r3, r3, #16
 80026ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	330c      	adds	r3, #12
 80026f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80026fc:	61fa      	str	r2, [r7, #28]
 80026fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002700:	69b9      	ldr	r1, [r7, #24]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	e841 2300 	strex	r3, r2, [r1]
 8002708:	617b      	str	r3, [r7, #20]
   return(result);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e3      	bne.n	80026d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f83b 	bl	8002798 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002722:	e023      	b.n	800276c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <HAL_UART_IRQHandler+0x4f4>
 8002730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f8e5 	bl	800290c <UART_Transmit_IT>
    return;
 8002742:	e014      	b.n	800276e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <HAL_UART_IRQHandler+0x51e>
 8002750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f924 	bl	80029aa <UART_EndTransmit_IT>
    return;
 8002762:	e004      	b.n	800276e <HAL_UART_IRQHandler+0x51e>
    return;
 8002764:	bf00      	nop
 8002766:	e002      	b.n	800276e <HAL_UART_IRQHandler+0x51e>
      return;
 8002768:	bf00      	nop
 800276a:	e000      	b.n	800276e <HAL_UART_IRQHandler+0x51e>
      return;
 800276c:	bf00      	nop
  }
}
 800276e:	37e8      	adds	r7, #232	@ 0xe8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	88fa      	ldrh	r2, [r7, #6]
 80027c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2222      	movs	r2, #34	@ 0x22
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002820:	b480      	push	{r7}
 8002822:	b095      	sub	sp, #84	@ 0x54
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002832:	e853 3f00 	ldrex	r3, [r3]
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800283e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002848:	643a      	str	r2, [r7, #64]	@ 0x40
 800284a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800284e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002850:	e841 2300 	strex	r3, r2, [r1]
 8002854:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e5      	bne.n	8002828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3314      	adds	r3, #20
 8002862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	e853 3f00 	ldrex	r3, [r3]
 800286a:	61fb      	str	r3, [r7, #28]
   return(result);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3314      	adds	r3, #20
 800287a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800287c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002884:	e841 2300 	strex	r3, r2, [r1]
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e5      	bne.n	800285c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	2b01      	cmp	r3, #1
 8002896:	d119      	bne.n	80028cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f023 0310 	bic.w	r3, r3, #16
 80028ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	330c      	adds	r3, #12
 80028b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028b8:	61ba      	str	r2, [r7, #24]
 80028ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	6979      	ldr	r1, [r7, #20]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	613b      	str	r3, [r7, #16]
   return(result);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e5      	bne.n	8002898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028da:	bf00      	nop
 80028dc:	3754      	adds	r7, #84	@ 0x54
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff ff41 	bl	8002786 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b21      	cmp	r3, #33	@ 0x21
 800291e:	d13e      	bne.n	800299e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002928:	d114      	bne.n	8002954 <UART_Transmit_IT+0x48>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d110      	bne.n	8002954 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002946:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	621a      	str	r2, [r3, #32]
 8002952:	e008      	b.n	8002966 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	1c59      	adds	r1, r3, #1
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6211      	str	r1, [r2, #32]
 800295e:	781a      	ldrb	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4619      	mov	r1, r3
 8002974:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002988:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002998:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fed2 	bl	8002774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b08c      	sub	sp, #48	@ 0x30
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b22      	cmp	r3, #34	@ 0x22
 80029ec:	f040 80ae 	bne.w	8002b4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f8:	d117      	bne.n	8002a2a <UART_Receive_IT+0x50>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d113      	bne.n	8002a2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	1c9a      	adds	r2, r3, #2
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a28:	e026      	b.n	8002a78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a3c:	d007      	beq.n	8002a4e <UART_Receive_IT+0x74>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <UART_Receive_IT+0x82>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e008      	b.n	8002a6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4619      	mov	r1, r3
 8002a86:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d15d      	bne.n	8002b48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0220 	bic.w	r2, r2, #32
 8002a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d135      	bne.n	8002b3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 0310 	bic.w	r3, r3, #16
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af8:	623a      	str	r2, [r7, #32]
 8002afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	69f9      	ldr	r1, [r7, #28]
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e5      	bne.n	8002ad8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d10a      	bne.n	8002b30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b34:	4619      	mov	r1, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fe2e 	bl	8002798 <HAL_UARTEx_RxEventCallback>
 8002b3c:	e002      	b.n	8002b44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fd fdf8 	bl	8000734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e002      	b.n	8002b4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3730      	adds	r7, #48	@ 0x30
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002b92:	f023 030c 	bic.w	r3, r3, #12
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a2c      	ldr	r2, [pc, #176]	@ (8002c6c <UART_SetConfig+0x114>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d103      	bne.n	8002bc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bc0:	f7fe fed0 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	e002      	b.n	8002bce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f7fe feb8 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 8002bcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009a      	lsls	r2, r3, #2
 8002bd8:	441a      	add	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	4a22      	ldr	r2, [pc, #136]	@ (8002c70 <UART_SetConfig+0x118>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	0119      	lsls	r1, r3, #4
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009a      	lsls	r2, r3, #2
 8002bf8:	441a      	add	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c04:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <UART_SetConfig+0x118>)
 8002c06:	fba3 0302 	umull	r0, r3, r3, r2
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2064      	movs	r0, #100	@ 0x64
 8002c0e:	fb00 f303 	mul.w	r3, r0, r3
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	3332      	adds	r3, #50	@ 0x32
 8002c18:	4a15      	ldr	r2, [pc, #84]	@ (8002c70 <UART_SetConfig+0x118>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c24:	4419      	add	r1, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009a      	lsls	r2, r3, #2
 8002c30:	441a      	add	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <UART_SetConfig+0x118>)
 8002c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2064      	movs	r0, #100	@ 0x64
 8002c46:	fb00 f303 	mul.w	r3, r0, r3
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	3332      	adds	r3, #50	@ 0x32
 8002c50:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <UART_SetConfig+0x118>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	f003 020f 	and.w	r2, r3, #15
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	440a      	add	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	51eb851f 	.word	0x51eb851f

08002c74 <memcmp>:
 8002c74:	b510      	push	{r4, lr}
 8002c76:	3901      	subs	r1, #1
 8002c78:	4402      	add	r2, r0
 8002c7a:	4290      	cmp	r0, r2
 8002c7c:	d101      	bne.n	8002c82 <memcmp+0xe>
 8002c7e:	2000      	movs	r0, #0
 8002c80:	e005      	b.n	8002c8e <memcmp+0x1a>
 8002c82:	7803      	ldrb	r3, [r0, #0]
 8002c84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002c88:	42a3      	cmp	r3, r4
 8002c8a:	d001      	beq.n	8002c90 <memcmp+0x1c>
 8002c8c:	1b18      	subs	r0, r3, r4
 8002c8e:	bd10      	pop	{r4, pc}
 8002c90:	3001      	adds	r0, #1
 8002c92:	e7f2      	b.n	8002c7a <memcmp+0x6>

08002c94 <memset>:
 8002c94:	4603      	mov	r3, r0
 8002c96:	4402      	add	r2, r0
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <memset+0xa>
 8002c9c:	4770      	bx	lr
 8002c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca2:	e7f9      	b.n	8002c98 <memset+0x4>

08002ca4 <__libc_init_array>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	2600      	movs	r6, #0
 8002ca8:	4d0c      	ldr	r5, [pc, #48]	@ (8002cdc <__libc_init_array+0x38>)
 8002caa:	4c0d      	ldr	r4, [pc, #52]	@ (8002ce0 <__libc_init_array+0x3c>)
 8002cac:	1b64      	subs	r4, r4, r5
 8002cae:	10a4      	asrs	r4, r4, #2
 8002cb0:	42a6      	cmp	r6, r4
 8002cb2:	d109      	bne.n	8002cc8 <__libc_init_array+0x24>
 8002cb4:	f000 f81a 	bl	8002cec <_init>
 8002cb8:	2600      	movs	r6, #0
 8002cba:	4d0a      	ldr	r5, [pc, #40]	@ (8002ce4 <__libc_init_array+0x40>)
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce8 <__libc_init_array+0x44>)
 8002cbe:	1b64      	subs	r4, r4, r5
 8002cc0:	10a4      	asrs	r4, r4, #2
 8002cc2:	42a6      	cmp	r6, r4
 8002cc4:	d105      	bne.n	8002cd2 <__libc_init_array+0x2e>
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ccc:	4798      	blx	r3
 8002cce:	3601      	adds	r6, #1
 8002cd0:	e7ee      	b.n	8002cb0 <__libc_init_array+0xc>
 8002cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd6:	4798      	blx	r3
 8002cd8:	3601      	adds	r6, #1
 8002cda:	e7f2      	b.n	8002cc2 <__libc_init_array+0x1e>
 8002cdc:	08002d38 	.word	0x08002d38
 8002ce0:	08002d38 	.word	0x08002d38
 8002ce4:	08002d38 	.word	0x08002d38
 8002ce8:	08002d3c 	.word	0x08002d3c

08002cec <_init>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr

08002cf8 <_fini>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	bf00      	nop
 8002cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfe:	bc08      	pop	{r3}
 8002d00:	469e      	mov	lr, r3
 8002d02:	4770      	bx	lr
