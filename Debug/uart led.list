
uart led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002c44  08002c44  00003c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c78  08002c78  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002c78  08002c78  00003c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c80  08002c80  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c80  08002c80  00003c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c84  08002c84  00003c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c88  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002c94  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002c94  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbcf  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b90  00000000  00000000  0000fc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00011798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095d  00000000  00000000  00012380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c6b  00000000  00000000  00012cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cda1  00000000  00000000  00029948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868cf  00000000  00000000  000366e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcfb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  000bcffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000c0208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c2c 	.word	0x08002c2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c2c 	.word	0x08002c2c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fbdf 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f847 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8fb 	bl	8000364 <MX_GPIO_Init>
  MX_TIM2_Init();
 800016e:	f000 f87f 	bl	8000270 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8cd 	bl	8000310 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, sizeof(rx_data));
 8000176:	2206      	movs	r2, #6
 8000178:	491a      	ldr	r1, [pc, #104]	@ (80001e4 <main+0x88>)
 800017a:	481b      	ldr	r0, [pc, #108]	@ (80001e8 <main+0x8c>)
 800017c:	f001 ffe3 	bl	8002146 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!(GPIOB->IDR & (1<<9))){
 8000180:	4b1a      	ldr	r3, [pc, #104]	@ (80001ec <main+0x90>)
 8000182:	689b      	ldr	r3, [r3, #8]
 8000184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000188:	2b00      	cmp	r3, #0
 800018a:	d10b      	bne.n	80001a4 <main+0x48>
		  HAL_Delay(100);
 800018c:	2064      	movs	r0, #100	@ 0x64
 800018e:	f000 fc2b 	bl	80009e8 <HAL_Delay>
		  check;
 8000192:	4b17      	ldr	r3, [pc, #92]	@ (80001f0 <main+0x94>)
 8000194:	68db      	ldr	r3, [r3, #12]
 8000196:	4a16      	ldr	r2, [pc, #88]	@ (80001f0 <main+0x94>)
 8000198:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800019c:	60d3      	str	r3, [r2, #12]
		  change_leds(2);
 800019e:	2002      	movs	r0, #2
 80001a0:	f000 f998 	bl	80004d4 <change_leds>
		  		  }

	  if(!(GPIOB->IDR & (1<<7))){
 80001a4:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <main+0x90>)
 80001a6:	689b      	ldr	r3, [r3, #8]
 80001a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d1e7      	bne.n	8000180 <main+0x24>

			  check;HAL_Delay(1000);
 80001b0:	4b0f      	ldr	r3, [pc, #60]	@ (80001f0 <main+0x94>)
 80001b2:	68db      	ldr	r3, [r3, #12]
 80001b4:	4a0e      	ldr	r2, [pc, #56]	@ (80001f0 <main+0x94>)
 80001b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80001ba:	60d3      	str	r3, [r2, #12]
 80001bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001c0:	f000 fc12 	bl	80009e8 <HAL_Delay>
			  char msg[] = "blink2";
 80001c4:	4a0b      	ldr	r2, [pc, #44]	@ (80001f4 <main+0x98>)
 80001c6:	463b      	mov	r3, r7
 80001c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001cc:	6018      	str	r0, [r3, #0]
 80001ce:	3304      	adds	r3, #4
 80001d0:	8019      	strh	r1, [r3, #0]
 80001d2:	3302      	adds	r3, #2
 80001d4:	0c0a      	lsrs	r2, r1, #16
 80001d6:	701a      	strb	r2, [r3, #0]
			  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)msg, sizeof(msg));
			  	  	send(msg);
 80001d8:	463b      	mov	r3, r7
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 fa2a 	bl	8000634 <send>
	  if(!(GPIOB->IDR & (1<<9))){
 80001e0:	e7ce      	b.n	8000180 <main+0x24>
 80001e2:	bf00      	nop
 80001e4:	200000b8 	.word	0x200000b8
 80001e8:	20000070 	.word	0x20000070
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	40011000 	.word	0x40011000
 80001f4:	08002c44 	.word	0x08002c44

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	@ 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 fce4 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	2310      	movs	r3, #16
 8000224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000226:	2300      	movs	r3, #0
 8000228:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	4618      	mov	r0, r3
 8000230:	f000 ff5a 	bl	80010e8 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800023a:	f000 fa57 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 f9c8 	bl	80015ec <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000262:	f000 fa43 	bl	80006ec <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	@ 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000276:	f107 030c 	add.w	r3, r7, #12
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800028e:	4b1f      	ldr	r3, [pc, #124]	@ (800030c <MX_TIM2_Init+0x9c>)
 8000290:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000294:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6199;
 8000296:	4b1d      	ldr	r3, [pc, #116]	@ (800030c <MX_TIM2_Init+0x9c>)
 8000298:	f641 0237 	movw	r2, #6199	@ 0x1837
 800029c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800029e:	4b1b      	ldr	r3, [pc, #108]	@ (800030c <MX_TIM2_Init+0x9c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002a4:	4b19      	ldr	r3, [pc, #100]	@ (800030c <MX_TIM2_Init+0x9c>)
 80002a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ac:	4b17      	ldr	r3, [pc, #92]	@ (800030c <MX_TIM2_Init+0x9c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002b2:	4b16      	ldr	r3, [pc, #88]	@ (800030c <MX_TIM2_Init+0x9c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002b8:	4814      	ldr	r0, [pc, #80]	@ (800030c <MX_TIM2_Init+0x9c>)
 80002ba:	f001 fb25 	bl	8001908 <HAL_TIM_Base_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80002c4:	f000 fa12 	bl	80006ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80002d0:	f107 030c 	add.w	r3, r7, #12
 80002d4:	4619      	mov	r1, r3
 80002d6:	480d      	ldr	r0, [pc, #52]	@ (800030c <MX_TIM2_Init+0x9c>)
 80002d8:	f001 fc55 	bl	8001b86 <HAL_TIM_SlaveConfigSynchro>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80002e2:	f000 fa03 	bl	80006ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	4806      	ldr	r0, [pc, #24]	@ (800030c <MX_TIM2_Init+0x9c>)
 80002f4:	f001 fe32 	bl	8001f5c <HAL_TIMEx_MasterConfigSynchronization>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80002fe:	f000 f9f5 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	3720      	adds	r7, #32
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000028 	.word	0x20000028

08000310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000314:	4b11      	ldr	r3, [pc, #68]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000316:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <MX_USART1_UART_Init+0x50>)
 8000318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800031a:	4b10      	ldr	r3, [pc, #64]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800031c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b08      	ldr	r3, [pc, #32]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000348:	f001 fe78 	bl	800203c <HAL_UART_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000352:	f000 f9cb 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000070 	.word	0x20000070
 8000360:	40013800 	.word	0x40013800

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08a      	sub	sp, #40	@ 0x28
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0314 	add.w	r3, r7, #20
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000378:	4b50      	ldr	r3, [pc, #320]	@ (80004bc <MX_GPIO_Init+0x158>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a4f      	ldr	r2, [pc, #316]	@ (80004bc <MX_GPIO_Init+0x158>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b4d      	ldr	r3, [pc, #308]	@ (80004bc <MX_GPIO_Init+0x158>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	613b      	str	r3, [r7, #16]
 800038e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b4a      	ldr	r3, [pc, #296]	@ (80004bc <MX_GPIO_Init+0x158>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a49      	ldr	r2, [pc, #292]	@ (80004bc <MX_GPIO_Init+0x158>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b47      	ldr	r3, [pc, #284]	@ (80004bc <MX_GPIO_Init+0x158>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b44      	ldr	r3, [pc, #272]	@ (80004bc <MX_GPIO_Init+0x158>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a43      	ldr	r2, [pc, #268]	@ (80004bc <MX_GPIO_Init+0x158>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b41      	ldr	r3, [pc, #260]	@ (80004bc <MX_GPIO_Init+0x158>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b3e      	ldr	r3, [pc, #248]	@ (80004bc <MX_GPIO_Init+0x158>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a3d      	ldr	r2, [pc, #244]	@ (80004bc <MX_GPIO_Init+0x158>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b3b      	ldr	r3, [pc, #236]	@ (80004bc <MX_GPIO_Init+0x158>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80003de:	4838      	ldr	r0, [pc, #224]	@ (80004c0 <MX_GPIO_Init+0x15c>)
 80003e0:	f000 fe6a 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2103      	movs	r1, #3
 80003e8:	4836      	ldr	r0, [pc, #216]	@ (80004c4 <MX_GPIO_Init+0x160>)
 80003ea:	f000 fe65 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003ee:	2200      	movs	r2, #0
 80003f0:	f649 11ff 	movw	r1, #39423	@ 0x99ff
 80003f4:	4834      	ldr	r0, [pc, #208]	@ (80004c8 <MX_GPIO_Init+0x164>)
 80003f6:	f000 fe5f 	bl	80010b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003fa:	2200      	movs	r2, #0
 80003fc:	f64f 413f 	movw	r1, #64575	@ 0xfc3f
 8000400:	4832      	ldr	r0, [pc, #200]	@ (80004cc <MX_GPIO_Init+0x168>)
 8000402:	f000 fe59 	bl	80010b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000406:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000414:	2302      	movs	r3, #2
 8000416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4619      	mov	r1, r3
 800041e:	4828      	ldr	r0, [pc, #160]	@ (80004c0 <MX_GPIO_Init+0x15c>)
 8000420:	f000 fcc6 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000424:	2303      	movs	r3, #3
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2302      	movs	r3, #2
 8000432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	4619      	mov	r1, r3
 800043a:	4822      	ldr	r0, [pc, #136]	@ (80004c4 <MX_GPIO_Init+0x160>)
 800043c:	f000 fcb8 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000440:	f649 13ff 	movw	r3, #39423	@ 0x99ff
 8000444:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2302      	movs	r3, #2
 8000450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	481b      	ldr	r0, [pc, #108]	@ (80004c8 <MX_GPIO_Init+0x164>)
 800045a:	f000 fca9 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800045e:	f64f 433f 	movw	r3, #64575	@ 0xfc3f
 8000462:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	4815      	ldr	r0, [pc, #84]	@ (80004cc <MX_GPIO_Init+0x168>)
 8000478:	f000 fc9a 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800047c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	4619      	mov	r1, r3
 8000490:	480e      	ldr	r0, [pc, #56]	@ (80004cc <MX_GPIO_Init+0x168>)
 8000492:	f000 fc8d 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <MX_GPIO_Init+0x16c>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	627b      	str	r3, [r7, #36]	@ 0x24
 800049c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800049e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80004a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80004a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80004ac:	4a08      	ldr	r2, [pc, #32]	@ (80004d0 <MX_GPIO_Init+0x16c>)
 80004ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004b2:	bf00      	nop
 80004b4:	3728      	adds	r7, #40	@ 0x28
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40011000 	.word	0x40011000
 80004c4:	40011400 	.word	0x40011400
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	40010000 	.word	0x40010000

080004d4 <change_leds>:

/* USER CODE BEGIN 4 */
void change_leds(int times){
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < times; i++){
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e098      	b.n	8000614 <change_leds+0x140>
		GPIOB -> ODR ^= (1<<12);
 80004e2:	4b52      	ldr	r3, [pc, #328]	@ (800062c <change_leds+0x158>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	4a51      	ldr	r2, [pc, #324]	@ (800062c <change_leds+0x158>)
 80004e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80004ec:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<0);
 80004ee:	4b50      	ldr	r3, [pc, #320]	@ (8000630 <change_leds+0x15c>)
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	4a4f      	ldr	r2, [pc, #316]	@ (8000630 <change_leds+0x15c>)
 80004f4:	f083 0301 	eor.w	r3, r3, #1
 80004f8:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<13);
 80004fa:	4b4c      	ldr	r3, [pc, #304]	@ (800062c <change_leds+0x158>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	4a4b      	ldr	r2, [pc, #300]	@ (800062c <change_leds+0x158>)
 8000500:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000504:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<1);
 8000506:	4b4a      	ldr	r3, [pc, #296]	@ (8000630 <change_leds+0x15c>)
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	4a49      	ldr	r2, [pc, #292]	@ (8000630 <change_leds+0x15c>)
 800050c:	f083 0302 	eor.w	r3, r3, #2
 8000510:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<14);
 8000512:	4b46      	ldr	r3, [pc, #280]	@ (800062c <change_leds+0x158>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	4a45      	ldr	r2, [pc, #276]	@ (800062c <change_leds+0x158>)
 8000518:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800051c:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<2);
 800051e:	4b44      	ldr	r3, [pc, #272]	@ (8000630 <change_leds+0x15c>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	4a43      	ldr	r2, [pc, #268]	@ (8000630 <change_leds+0x15c>)
 8000524:	f083 0304 	eor.w	r3, r3, #4
 8000528:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<15);
 800052a:	4b40      	ldr	r3, [pc, #256]	@ (800062c <change_leds+0x158>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	4a3f      	ldr	r2, [pc, #252]	@ (800062c <change_leds+0x158>)
 8000530:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 8000534:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<3);
 8000536:	4b3e      	ldr	r3, [pc, #248]	@ (8000630 <change_leds+0x15c>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4a3d      	ldr	r2, [pc, #244]	@ (8000630 <change_leds+0x15c>)
 800053c:	f083 0308 	eor.w	r3, r3, #8
 8000540:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<8);
 8000542:	4b3b      	ldr	r3, [pc, #236]	@ (8000630 <change_leds+0x15c>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	4a3a      	ldr	r2, [pc, #232]	@ (8000630 <change_leds+0x15c>)
 8000548:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 800054c:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<4);
 800054e:	4b38      	ldr	r3, [pc, #224]	@ (8000630 <change_leds+0x15c>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	4a37      	ldr	r2, [pc, #220]	@ (8000630 <change_leds+0x15c>)
 8000554:	f083 0310 	eor.w	r3, r3, #16
 8000558:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<5);
 800055a:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <change_leds+0x15c>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	4a34      	ldr	r2, [pc, #208]	@ (8000630 <change_leds+0x15c>)
 8000560:	f083 0320 	eor.w	r3, r3, #32
 8000564:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<6);
 8000566:	4b32      	ldr	r3, [pc, #200]	@ (8000630 <change_leds+0x15c>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	4a31      	ldr	r2, [pc, #196]	@ (8000630 <change_leds+0x15c>)
 800056c:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000570:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<11);
 8000572:	4b2f      	ldr	r3, [pc, #188]	@ (8000630 <change_leds+0x15c>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	4a2e      	ldr	r2, [pc, #184]	@ (8000630 <change_leds+0x15c>)
 8000578:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 800057c:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<7);
 800057e:	4b2c      	ldr	r3, [pc, #176]	@ (8000630 <change_leds+0x15c>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	4a2b      	ldr	r2, [pc, #172]	@ (8000630 <change_leds+0x15c>)
 8000584:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8000588:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<12);
 800058a:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <change_leds+0x15c>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	4a28      	ldr	r2, [pc, #160]	@ (8000630 <change_leds+0x15c>)
 8000590:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8000594:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<0);
 8000596:	4b25      	ldr	r3, [pc, #148]	@ (800062c <change_leds+0x158>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	4a24      	ldr	r2, [pc, #144]	@ (800062c <change_leds+0x158>)
 800059c:	f083 0301 	eor.w	r3, r3, #1
 80005a0:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<13);
 80005a2:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <change_leds+0x15c>)
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <change_leds+0x15c>)
 80005a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80005ac:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<1);
 80005ae:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <change_leds+0x158>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	4a1e      	ldr	r2, [pc, #120]	@ (800062c <change_leds+0x158>)
 80005b4:	f083 0302 	eor.w	r3, r3, #2
 80005b8:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<14);
 80005ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <change_leds+0x15c>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4a1c      	ldr	r2, [pc, #112]	@ (8000630 <change_leds+0x15c>)
 80005c0:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 80005c4:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<10);
 80005c6:	4b19      	ldr	r3, [pc, #100]	@ (800062c <change_leds+0x158>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4a18      	ldr	r2, [pc, #96]	@ (800062c <change_leds+0x158>)
 80005cc:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 80005d0:	60d3      	str	r3, [r2, #12]
		GPIOA -> ODR ^= (1<<15);
 80005d2:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <change_leds+0x15c>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	4a16      	ldr	r2, [pc, #88]	@ (8000630 <change_leds+0x15c>)
 80005d8:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 80005dc:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<11);
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <change_leds+0x158>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	4a12      	ldr	r2, [pc, #72]	@ (800062c <change_leds+0x158>)
 80005e4:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 80005e8:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<3);
 80005ea:	4b10      	ldr	r3, [pc, #64]	@ (800062c <change_leds+0x158>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <change_leds+0x158>)
 80005f0:	f083 0308 	eor.w	r3, r3, #8
 80005f4:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<4);
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <change_leds+0x158>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <change_leds+0x158>)
 80005fc:	f083 0310 	eor.w	r3, r3, #16
 8000600:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<5);
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <change_leds+0x158>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	4a09      	ldr	r2, [pc, #36]	@ (800062c <change_leds+0x158>)
 8000608:	f083 0320 	eor.w	r3, r3, #32
 800060c:	60d3      	str	r3, [r2, #12]
	for(int i = 0; i < times; i++){
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	f6ff af62 	blt.w	80004e2 <change_leds+0xe>
	}
}
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40010c00 	.word	0x40010c00
 8000630:	40010800 	.word	0x40010800

08000634 <send>:



void send(data) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	int size = strlen(data);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fd84 	bl	800014c <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)data, (uint16_t*)size);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	b292      	uxth	r2, r2
 800064e:	4619      	mov	r1, r3
 8000650:	4806      	ldr	r0, [pc, #24]	@ (800066c <send+0x38>)
 8000652:	f001 fd43 	bl	80020dc <HAL_UART_Transmit_IT>
	check;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <send+0x3c>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <send+0x3c>)
 800065c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000660:	60d3      	str	r3, [r2, #12]
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000070 	.word	0x20000070
 8000670:	40011000 	.word	0x40011000

08000674 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a15      	ldr	r2, [pc, #84]	@ (80006d8 <HAL_UART_RxCpltCallback+0x64>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d123      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x5a>
    {
    	//char itog[]={'q','w','e','r','t','y'}; - работает
    	//char itog[]="qwerty"; - тоже работает
    	if (memcmp("blink2", rx_data, sizeof(rx_data)) == 0)
 8000686:	2206      	movs	r2, #6
 8000688:	4914      	ldr	r1, [pc, #80]	@ (80006dc <HAL_UART_RxCpltCallback+0x68>)
 800068a:	4815      	ldr	r0, [pc, #84]	@ (80006e0 <HAL_UART_RxCpltCallback+0x6c>)
 800068c:	f002 fa92 	bl	8002bb4 <memcmp>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d108      	bne.n	80006a8 <HAL_UART_RxCpltCallback+0x34>
    	{
    		check;
 8000696:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <HAL_UART_RxCpltCallback+0x70>)
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <HAL_UART_RxCpltCallback+0x70>)
 800069c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80006a0:	60d3      	str	r3, [r2, #12]
    		change_leds(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff ff16 	bl	80004d4 <change_leds>
            }
    	// очистка
    	for(int i = 0; i<sizeof(rx_data); i++){
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e007      	b.n	80006be <HAL_UART_RxCpltCallback+0x4a>
    		rx_data[i]='0';
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <HAL_UART_RxCpltCallback+0x68>)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	2230      	movs	r2, #48	@ 0x30
 80006b6:	701a      	strb	r2, [r3, #0]
    	for(int i = 0; i<sizeof(rx_data); i++){
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d9f4      	bls.n	80006ae <HAL_UART_RxCpltCallback+0x3a>
    	}

        // Перезапускаем приёма
        HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, sizeof(rx_data));
 80006c4:	2206      	movs	r2, #6
 80006c6:	4905      	ldr	r1, [pc, #20]	@ (80006dc <HAL_UART_RxCpltCallback+0x68>)
 80006c8:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <HAL_UART_RxCpltCallback+0x74>)
 80006ca:	f001 fd3c 	bl	8002146 <HAL_UART_Receive_IT>

    }
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40013800 	.word	0x40013800
 80006dc:	200000b8 	.word	0x200000b8
 80006e0:	08002c44 	.word	0x08002c44
 80006e4:	40011000 	.word	0x40011000
 80006e8:	20000070 	.word	0x20000070

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a14      	ldr	r2, [pc, #80]	@ (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0e      	ldr	r2, [pc, #56]	@ (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <HAL_MspInit+0x60>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <HAL_MspInit+0x60>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000
 8000758:	40010000 	.word	0x40010000

0800075c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800076c:	d113      	bne.n	8000796 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	201c      	movs	r0, #28
 800078c:	f000 fa27 	bl	8000bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000790:	201c      	movs	r0, #28
 8000792:	f000 fa40 	bl	8000c16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a20      	ldr	r2, [pc, #128]	@ (8000840 <HAL_UART_MspInit+0x9c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d139      	bne.n	8000838 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <HAL_UART_MspInit+0xa0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a1e      	ldr	r2, [pc, #120]	@ (8000844 <HAL_UART_MspInit+0xa0>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <HAL_UART_MspInit+0xa0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <HAL_UART_MspInit+0xa0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <HAL_UART_MspInit+0xa0>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <HAL_UART_MspInit+0xa0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	@ (8000848 <HAL_UART_MspInit+0xa4>)
 800080a:	f000 fad1 	bl	8000db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800080e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4809      	ldr	r0, [pc, #36]	@ (8000848 <HAL_UART_MspInit+0xa4>)
 8000824:	f000 fac4 	bl	8000db0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2025      	movs	r0, #37	@ 0x25
 800082e:	f000 f9d6 	bl	8000bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000832:	2025      	movs	r0, #37	@ 0x25
 8000834:	f000 f9ef 	bl	8000c16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40013800 	.word	0x40013800
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <NMI_Handler+0x4>

08000854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <MemManage_Handler+0x4>

08000864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <UsageFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f888 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008a8:	4802      	ldr	r0, [pc, #8]	@ (80008b4 <TIM2_IRQHandler+0x10>)
 80008aa:	f001 f87c 	bl	80019a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000028 	.word	0x20000028

080008b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008bc:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <USART1_IRQHandler+0x10>)
 80008be:	f001 fc67 	bl	8002190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000070 	.word	0x20000070

080008cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d8:	f7ff fff8 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480b      	ldr	r0, [pc, #44]	@ (800090c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008de:	490c      	ldr	r1, [pc, #48]	@ (8000910 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000914 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a09      	ldr	r2, [pc, #36]	@ (8000918 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008f4:	4c09      	ldr	r4, [pc, #36]	@ (800091c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000902:	f002 f96f 	bl	8002be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000906:	f7ff fc29 	bl	800015c <main>
  bx lr
 800090a:	4770      	bx	lr
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000914:	08002c88 	.word	0x08002c88
  ldr r2, =_sbss
 8000918:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800091c:	200000c4 	.word	0x200000c4

08000920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_2_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_Init+0x28>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	@ (800094c <HAL_Init+0x28>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f947 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	200f      	movs	r0, #15
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff feda 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f95f 	bl	8000c32 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 f927 	bl	8000bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <HAL_IncTick+0x1c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <HAL_IncTick+0x20>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a03      	ldr	r2, [pc, #12]	@ (80009d0 <HAL_IncTick+0x20>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	20000008 	.word	0x20000008
 80009d0:	200000c0 	.word	0x200000c0

080009d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b02      	ldr	r3, [pc, #8]	@ (80009e4 <HAL_GetTick+0x10>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	200000c0 	.word	0x200000c0

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff fff0 	bl	80009d4 <HAL_GetTick>
 80009f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	d005      	beq.n	8000a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_Delay+0x44>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffe0 	bl	80009d4 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8f7      	bhi.n	8000a10 <HAL_Delay+0x28>
  {
  }
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4906      	ldr	r1, [pc, #24]	@ (8000ac8 <__NVIC_EnableIRQ+0x34>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	@ (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	@ 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff90 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff2d 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff42 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff90 	bl	8000b20 <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5f 	bl	8000acc <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff35 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffa2 	bl	8000b84 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d008      	beq.n	8000c74 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2204      	movs	r2, #4
 8000c66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e020      	b.n	8000cb6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f022 020e 	bic.w	r2, r2, #14
 8000c82:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0201 	bic.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d005      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2204      	movs	r2, #4
 8000cdc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e051      	b.n	8000d88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 020e 	bic.w	r2, r2, #14
 8000cf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0201 	bic.w	r2, r2, #1
 8000d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a22      	ldr	r2, [pc, #136]	@ (8000d94 <HAL_DMA_Abort_IT+0xd4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d029      	beq.n	8000d62 <HAL_DMA_Abort_IT+0xa2>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a21      	ldr	r2, [pc, #132]	@ (8000d98 <HAL_DMA_Abort_IT+0xd8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d022      	beq.n	8000d5e <HAL_DMA_Abort_IT+0x9e>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d9c <HAL_DMA_Abort_IT+0xdc>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d01a      	beq.n	8000d58 <HAL_DMA_Abort_IT+0x98>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <HAL_DMA_Abort_IT+0xe0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d012      	beq.n	8000d52 <HAL_DMA_Abort_IT+0x92>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1c      	ldr	r2, [pc, #112]	@ (8000da4 <HAL_DMA_Abort_IT+0xe4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00a      	beq.n	8000d4c <HAL_DMA_Abort_IT+0x8c>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000da8 <HAL_DMA_Abort_IT+0xe8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d102      	bne.n	8000d46 <HAL_DMA_Abort_IT+0x86>
 8000d40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d44:	e00e      	b.n	8000d64 <HAL_DMA_Abort_IT+0xa4>
 8000d46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d4a:	e00b      	b.n	8000d64 <HAL_DMA_Abort_IT+0xa4>
 8000d4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d50:	e008      	b.n	8000d64 <HAL_DMA_Abort_IT+0xa4>
 8000d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d56:	e005      	b.n	8000d64 <HAL_DMA_Abort_IT+0xa4>
 8000d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d5c:	e002      	b.n	8000d64 <HAL_DMA_Abort_IT+0xa4>
 8000d5e:	2310      	movs	r3, #16
 8000d60:	e000      	b.n	8000d64 <HAL_DMA_Abort_IT+0xa4>
 8000d62:	2301      	movs	r3, #1
 8000d64:	4a11      	ldr	r2, [pc, #68]	@ (8000dac <HAL_DMA_Abort_IT+0xec>)
 8000d66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	4798      	blx	r3
    } 
  }
  return status;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020008 	.word	0x40020008
 8000d98:	4002001c 	.word	0x4002001c
 8000d9c:	40020030 	.word	0x40020030
 8000da0:	40020044 	.word	0x40020044
 8000da4:	40020058 	.word	0x40020058
 8000da8:	4002006c 	.word	0x4002006c
 8000dac:	40020000 	.word	0x40020000

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b08b      	sub	sp, #44	@ 0x2c
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	e169      	b.n	8001098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f040 8158 	bne.w	8001092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4a9a      	ldr	r2, [pc, #616]	@ (8001050 <HAL_GPIO_Init+0x2a0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d05e      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000dec:	4a98      	ldr	r2, [pc, #608]	@ (8001050 <HAL_GPIO_Init+0x2a0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d875      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000df2:	4a98      	ldr	r2, [pc, #608]	@ (8001054 <HAL_GPIO_Init+0x2a4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d058      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000df8:	4a96      	ldr	r2, [pc, #600]	@ (8001054 <HAL_GPIO_Init+0x2a4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d86f      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000dfe:	4a96      	ldr	r2, [pc, #600]	@ (8001058 <HAL_GPIO_Init+0x2a8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d052      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000e04:	4a94      	ldr	r2, [pc, #592]	@ (8001058 <HAL_GPIO_Init+0x2a8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d869      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000e0a:	4a94      	ldr	r2, [pc, #592]	@ (800105c <HAL_GPIO_Init+0x2ac>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d04c      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000e10:	4a92      	ldr	r2, [pc, #584]	@ (800105c <HAL_GPIO_Init+0x2ac>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d863      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000e16:	4a92      	ldr	r2, [pc, #584]	@ (8001060 <HAL_GPIO_Init+0x2b0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d046      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
 8000e1c:	4a90      	ldr	r2, [pc, #576]	@ (8001060 <HAL_GPIO_Init+0x2b0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d85d      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d82a      	bhi.n	8000e7c <HAL_GPIO_Init+0xcc>
 8000e26:	2b12      	cmp	r3, #18
 8000e28:	d859      	bhi.n	8000ede <HAL_GPIO_Init+0x12e>
 8000e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e30 <HAL_GPIO_Init+0x80>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000eab 	.word	0x08000eab
 8000e34:	08000e85 	.word	0x08000e85
 8000e38:	08000e97 	.word	0x08000e97
 8000e3c:	08000ed9 	.word	0x08000ed9
 8000e40:	08000edf 	.word	0x08000edf
 8000e44:	08000edf 	.word	0x08000edf
 8000e48:	08000edf 	.word	0x08000edf
 8000e4c:	08000edf 	.word	0x08000edf
 8000e50:	08000edf 	.word	0x08000edf
 8000e54:	08000edf 	.word	0x08000edf
 8000e58:	08000edf 	.word	0x08000edf
 8000e5c:	08000edf 	.word	0x08000edf
 8000e60:	08000edf 	.word	0x08000edf
 8000e64:	08000edf 	.word	0x08000edf
 8000e68:	08000edf 	.word	0x08000edf
 8000e6c:	08000edf 	.word	0x08000edf
 8000e70:	08000edf 	.word	0x08000edf
 8000e74:	08000e8d 	.word	0x08000e8d
 8000e78:	08000ea1 	.word	0x08000ea1
 8000e7c:	4a79      	ldr	r2, [pc, #484]	@ (8001064 <HAL_GPIO_Init+0x2b4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e82:	e02c      	b.n	8000ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	623b      	str	r3, [r7, #32]
          break;
 8000e8a:	e029      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	3304      	adds	r3, #4
 8000e92:	623b      	str	r3, [r7, #32]
          break;
 8000e94:	e024      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	623b      	str	r3, [r7, #32]
          break;
 8000e9e:	e01f      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	330c      	adds	r3, #12
 8000ea6:	623b      	str	r3, [r7, #32]
          break;
 8000ea8:	e01a      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	623b      	str	r3, [r7, #32]
          break;
 8000eb6:	e013      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d105      	bne.n	8000ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	611a      	str	r2, [r3, #16]
          break;
 8000eca:	e009      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	615a      	str	r2, [r3, #20]
          break;
 8000ed6:	e003      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
          break;
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x130>
          break;
 8000ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	2bff      	cmp	r3, #255	@ 0xff
 8000ee4:	d801      	bhi.n	8000eea <HAL_GPIO_Init+0x13a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	e001      	b.n	8000eee <HAL_GPIO_Init+0x13e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3304      	adds	r3, #4
 8000eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2bff      	cmp	r3, #255	@ 0xff
 8000ef4:	d802      	bhi.n	8000efc <HAL_GPIO_Init+0x14c>
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	e002      	b.n	8000f02 <HAL_GPIO_Init+0x152>
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	3b08      	subs	r3, #8
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	210f      	movs	r1, #15
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	401a      	ands	r2, r3
 8000f14:	6a39      	ldr	r1, [r7, #32]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 80b1 	beq.w	8001092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f30:	4b4d      	ldr	r3, [pc, #308]	@ (8001068 <HAL_GPIO_Init+0x2b8>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a4c      	ldr	r2, [pc, #304]	@ (8001068 <HAL_GPIO_Init+0x2b8>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001068 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f48:	4a48      	ldr	r2, [pc, #288]	@ (800106c <HAL_GPIO_Init+0x2bc>)
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a40      	ldr	r2, [pc, #256]	@ (8001070 <HAL_GPIO_Init+0x2c0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d013      	beq.n	8000f9c <HAL_GPIO_Init+0x1ec>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a3f      	ldr	r2, [pc, #252]	@ (8001074 <HAL_GPIO_Init+0x2c4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d00d      	beq.n	8000f98 <HAL_GPIO_Init+0x1e8>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001078 <HAL_GPIO_Init+0x2c8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x1e4>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a3d      	ldr	r2, [pc, #244]	@ (800107c <HAL_GPIO_Init+0x2cc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_GPIO_Init+0x1e0>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f90:	2304      	movs	r3, #4
 8000f92:	e004      	b.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fae:	492f      	ldr	r1, [pc, #188]	@ (800106c <HAL_GPIO_Init+0x2bc>)
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	492c      	ldr	r1, [pc, #176]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	4928      	ldr	r1, [pc, #160]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ff0:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	4922      	ldr	r1, [pc, #136]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60cb      	str	r3, [r1, #12]
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ffe:	4b20      	ldr	r3, [pc, #128]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	43db      	mvns	r3, r3
 8001006:	491e      	ldr	r1, [pc, #120]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001008:	4013      	ands	r3, r2
 800100a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001018:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	4918      	ldr	r1, [pc, #96]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	43db      	mvns	r3, r3
 800102e:	4914      	ldr	r1, [pc, #80]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001030:	4013      	ands	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d021      	beq.n	8001084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	490e      	ldr	r1, [pc, #56]	@ (8001080 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e021      	b.n	8001092 <HAL_GPIO_Init+0x2e2>
 800104e:	bf00      	nop
 8001050:	10320000 	.word	0x10320000
 8001054:	10310000 	.word	0x10310000
 8001058:	10220000 	.word	0x10220000
 800105c:	10210000 	.word	0x10210000
 8001060:	10120000 	.word	0x10120000
 8001064:	10110000 	.word	0x10110000
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	40010800 	.word	0x40010800
 8001074:	40010c00 	.word	0x40010c00
 8001078:	40011000 	.word	0x40011000
 800107c:	40011400 	.word	0x40011400
 8001080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	43db      	mvns	r3, r3
 800108c:	4909      	ldr	r1, [pc, #36]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 800108e:	4013      	ands	r3, r2
 8001090:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	3301      	adds	r3, #1
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	fa22 f303 	lsr.w	r3, r2, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f47f ae8e 	bne.w	8000dc4 <HAL_GPIO_Init+0x14>
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	372c      	adds	r7, #44	@ 0x2c
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	611a      	str	r2, [r3, #16]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e272      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8087 	beq.w	8001216 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001108:	4b92      	ldr	r3, [pc, #584]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b04      	cmp	r3, #4
 8001112:	d00c      	beq.n	800112e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001114:	4b8f      	ldr	r3, [pc, #572]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	2b08      	cmp	r3, #8
 800111e:	d112      	bne.n	8001146 <HAL_RCC_OscConfig+0x5e>
 8001120:	4b8c      	ldr	r3, [pc, #560]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800112c:	d10b      	bne.n	8001146 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112e:	4b89      	ldr	r3, [pc, #548]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d06c      	beq.n	8001214 <HAL_RCC_OscConfig+0x12c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d168      	bne.n	8001214 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e24c      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x76>
 8001150:	4b80      	ldr	r3, [pc, #512]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a7f      	ldr	r2, [pc, #508]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	e02e      	b.n	80011bc <HAL_RCC_OscConfig+0xd4>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x98>
 8001166:	4b7b      	ldr	r3, [pc, #492]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a7a      	ldr	r2, [pc, #488]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 800116c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b78      	ldr	r3, [pc, #480]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a77      	ldr	r2, [pc, #476]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001178:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e01d      	b.n	80011bc <HAL_RCC_OscConfig+0xd4>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0xbc>
 800118a:	4b72      	ldr	r3, [pc, #456]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a71      	ldr	r2, [pc, #452]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b6f      	ldr	r3, [pc, #444]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6e      	ldr	r2, [pc, #440]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0xd4>
 80011a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b68      	ldr	r3, [pc, #416]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a67      	ldr	r2, [pc, #412]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fc06 	bl	80009d4 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fc02 	bl	80009d4 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	@ 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e200      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b5d      	ldr	r3, [pc, #372]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0xe4>
 80011ea:	e014      	b.n	8001216 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fbf2 	bl	80009d4 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fbee 	bl	80009d4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	@ 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1ec      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	4b53      	ldr	r3, [pc, #332]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x10c>
 8001212:	e000      	b.n	8001216 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d063      	beq.n	80012ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001222:	4b4c      	ldr	r3, [pc, #304]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800122e:	4b49      	ldr	r3, [pc, #292]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b08      	cmp	r3, #8
 8001238:	d11c      	bne.n	8001274 <HAL_RCC_OscConfig+0x18c>
 800123a:	4b46      	ldr	r3, [pc, #280]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d116      	bne.n	8001274 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	4b43      	ldr	r3, [pc, #268]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <HAL_RCC_OscConfig+0x176>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e1c0      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	4b3d      	ldr	r3, [pc, #244]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4939      	ldr	r1, [pc, #228]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001272:	e03a      	b.n	80012ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d020      	beq.n	80012be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800127c:	4b36      	ldr	r3, [pc, #216]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fba7 	bl	80009d4 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fba3 	bl	80009d4 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e1a1      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4927      	ldr	r1, [pc, #156]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
 80012bc:	e015      	b.n	80012ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb86 	bl	80009d4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012cc:	f7ff fb82 	bl	80009d4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e180      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d03a      	beq.n	800136c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d019      	beq.n	8001332 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <HAL_RCC_OscConfig+0x274>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001304:	f7ff fb66 	bl	80009d4 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff fb62 	bl	80009d4 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e160      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <HAL_RCC_OscConfig+0x26c>)
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 face 	bl	80018cc <RCC_Delay>
 8001330:	e01c      	b.n	800136c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <HAL_RCC_OscConfig+0x274>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fb4c 	bl	80009d4 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133e:	e00f      	b.n	8001360 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fb48 	bl	80009d4 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d908      	bls.n	8001360 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e146      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	42420000 	.word	0x42420000
 800135c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	4b92      	ldr	r3, [pc, #584]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e9      	bne.n	8001340 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80a6 	beq.w	80014c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137e:	4b8b      	ldr	r3, [pc, #556]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b88      	ldr	r3, [pc, #544]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a87      	ldr	r2, [pc, #540]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b85      	ldr	r3, [pc, #532]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a2:	2301      	movs	r3, #1
 80013a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a6:	4b82      	ldr	r3, [pc, #520]	@ (80015b0 <HAL_RCC_OscConfig+0x4c8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d118      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b2:	4b7f      	ldr	r3, [pc, #508]	@ (80015b0 <HAL_RCC_OscConfig+0x4c8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7e      	ldr	r2, [pc, #504]	@ (80015b0 <HAL_RCC_OscConfig+0x4c8>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013be:	f7ff fb09 	bl	80009d4 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c6:	f7ff fb05 	bl	80009d4 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	@ 0x64
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e103      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	4b75      	ldr	r3, [pc, #468]	@ (80015b0 <HAL_RCC_OscConfig+0x4c8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x312>
 80013ec:	4b6f      	ldr	r3, [pc, #444]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a6e      	ldr	r2, [pc, #440]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6213      	str	r3, [r2, #32]
 80013f8:	e02d      	b.n	8001456 <HAL_RCC_OscConfig+0x36e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x334>
 8001402:	4b6a      	ldr	r3, [pc, #424]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a69      	ldr	r2, [pc, #420]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	4b67      	ldr	r3, [pc, #412]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4a66      	ldr	r2, [pc, #408]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001414:	f023 0304 	bic.w	r3, r3, #4
 8001418:	6213      	str	r3, [r2, #32]
 800141a:	e01c      	b.n	8001456 <HAL_RCC_OscConfig+0x36e>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d10c      	bne.n	800143e <HAL_RCC_OscConfig+0x356>
 8001424:	4b61      	ldr	r3, [pc, #388]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4a60      	ldr	r2, [pc, #384]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6213      	str	r3, [r2, #32]
 8001430:	4b5e      	ldr	r3, [pc, #376]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a5d      	ldr	r2, [pc, #372]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	e00b      	b.n	8001456 <HAL_RCC_OscConfig+0x36e>
 800143e:	4b5b      	ldr	r3, [pc, #364]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a5a      	ldr	r2, [pc, #360]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6213      	str	r3, [r2, #32]
 800144a:	4b58      	ldr	r3, [pc, #352]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a57      	ldr	r2, [pc, #348]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d015      	beq.n	800148a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fab9 	bl	80009d4 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7ff fab5 	bl	80009d4 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0b1      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	4b4b      	ldr	r3, [pc, #300]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ee      	beq.n	8001466 <HAL_RCC_OscConfig+0x37e>
 8001488:	e014      	b.n	80014b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7ff faa3 	bl	80009d4 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff fa9f 	bl	80009d4 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e09b      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a8:	4b40      	ldr	r3, [pc, #256]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ee      	bne.n	8001492 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d105      	bne.n	80014c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ba:	4b3c      	ldr	r3, [pc, #240]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a3b      	ldr	r2, [pc, #236]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8087 	beq.w	80015de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d0:	4b36      	ldr	r3, [pc, #216]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d061      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d146      	bne.n	8001572 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e4:	4b33      	ldr	r3, [pc, #204]	@ (80015b4 <HAL_RCC_OscConfig+0x4cc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fa73 	bl	80009d4 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff fa6f 	bl	80009d4 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e06d      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001504:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001518:	d108      	bne.n	800152c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800151a:	4b24      	ldr	r3, [pc, #144]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	4921      	ldr	r1, [pc, #132]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800152c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a19      	ldr	r1, [r3, #32]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	430b      	orrs	r3, r1
 800153e:	491b      	ldr	r1, [pc, #108]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001544:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_RCC_OscConfig+0x4cc>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fa43 	bl	80009d4 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001552:	f7ff fa3f 	bl	80009d4 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e03d      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x46a>
 8001570:	e035      	b.n	80015de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_RCC_OscConfig+0x4cc>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fa2c 	bl	80009d4 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff fa28 	bl	80009d4 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e026      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_RCC_OscConfig+0x4c4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x498>
 800159e:	e01e      	b.n	80015de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e019      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40007000 	.word	0x40007000
 80015b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <HAL_RCC_OscConfig+0x500>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0d0      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b6a      	ldr	r3, [pc, #424]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d910      	bls.n	8001630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b67      	ldr	r3, [pc, #412]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 0207 	bic.w	r2, r3, #7
 8001616:	4965      	ldr	r1, [pc, #404]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b63      	ldr	r3, [pc, #396]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0b8      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001648:	4b59      	ldr	r3, [pc, #356]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a58      	ldr	r2, [pc, #352]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001652:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001660:	4b53      	ldr	r3, [pc, #332]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a52      	ldr	r2, [pc, #328]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800166a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166c:	4b50      	ldr	r3, [pc, #320]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	494d      	ldr	r1, [pc, #308]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d040      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b47      	ldr	r3, [pc, #284]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d115      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e07f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b41      	ldr	r3, [pc, #260]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e073      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3d      	ldr	r3, [pc, #244]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e06b      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4936      	ldr	r1, [pc, #216]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff f97a 	bl	80009d4 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff f976 	bl	80009d4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e053      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b27      	ldr	r3, [pc, #156]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d210      	bcs.n	800173c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 0207 	bic.w	r2, r3, #7
 8001722:	4922      	ldr	r1, [pc, #136]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e032      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001748:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4916      	ldr	r1, [pc, #88]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001766:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	490e      	ldr	r1, [pc, #56]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800177a:	f000 f821 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 800177e:	4602      	mov	r2, r0
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	490a      	ldr	r1, [pc, #40]	@ (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 800178c:	5ccb      	ldrb	r3, [r1, r3]
 800178e:	fa22 f303 	lsr.w	r3, r2, r3
 8001792:	4a09      	ldr	r2, [pc, #36]	@ (80017b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_RCC_ClockConfig+0x1d0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f8d8 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40022000 	.word	0x40022000
 80017b0:	40021000 	.word	0x40021000
 80017b4:	08002c4c 	.word	0x08002c4c
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017da:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x94>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d002      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x30>
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_GetSysClockFreq+0x36>
 80017ee:	e027      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x98>)
 80017f2:	613b      	str	r3, [r7, #16]
      break;
 80017f4:	e027      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	0c9b      	lsrs	r3, r3, #18
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	4a17      	ldr	r2, [pc, #92]	@ (800185c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001800:	5cd3      	ldrb	r3, [r2, r3]
 8001802:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d010      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x94>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	0c5b      	lsrs	r3, r3, #17
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	4a11      	ldr	r2, [pc, #68]	@ (8001860 <HAL_RCC_GetSysClockFreq+0xa0>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x98>)
 8001822:	fb03 f202 	mul.w	r2, r3, r2
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e004      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a0c      	ldr	r2, [pc, #48]	@ (8001864 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	613b      	str	r3, [r7, #16]
      break;
 800183e:	e002      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x98>)
 8001842:	613b      	str	r3, [r7, #16]
      break;
 8001844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001846:	693b      	ldr	r3, [r7, #16]
}
 8001848:	4618      	mov	r0, r3
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	007a1200 	.word	0x007a1200
 800185c:	08002c64 	.word	0x08002c64
 8001860:	08002c74 	.word	0x08002c74
 8001864:	003d0900 	.word	0x003d0900

08001868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800186c:	4b02      	ldr	r3, [pc, #8]	@ (8001878 <HAL_RCC_GetHCLKFreq+0x10>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	20000000 	.word	0x20000000

0800187c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001880:	f7ff fff2 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	4b05      	ldr	r3, [pc, #20]	@ (800189c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	4903      	ldr	r1, [pc, #12]	@ (80018a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001898:	4618      	mov	r0, r3
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000
 80018a0:	08002c5c 	.word	0x08002c5c

080018a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018a8:	f7ff ffde 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	0adb      	lsrs	r3, r3, #11
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	4903      	ldr	r1, [pc, #12]	@ (80018c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ba:	5ccb      	ldrb	r3, [r1, r3]
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	08002c5c 	.word	0x08002c5c

080018cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <RCC_Delay+0x34>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <RCC_Delay+0x38>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0a5b      	lsrs	r3, r3, #9
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018e8:	bf00      	nop
  }
  while (Delay --);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	60fa      	str	r2, [r7, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f9      	bne.n	80018e8 <RCC_Delay+0x1c>
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	20000000 	.word	0x20000000
 8001904:	10624dd3 	.word	0x10624dd3

08001908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e041      	b.n	800199e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7fe ff14 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3304      	adds	r3, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f000 f98c 	bl	8001c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01b      	beq.n	8001a0a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f06f 0202 	mvn.w	r2, #2
 80019da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f91c 	bl	8001c2e <HAL_TIM_IC_CaptureCallback>
 80019f6:	e005      	b.n	8001a04 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f90f 	bl	8001c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f91e 	bl	8001c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d01b      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0204 	mvn.w	r2, #4
 8001a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8f6 	bl	8001c2e <HAL_TIM_IC_CaptureCallback>
 8001a42:	e005      	b.n	8001a50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f8e9 	bl	8001c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8f8 	bl	8001c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01b      	beq.n	8001aa2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f06f 0208 	mvn.w	r2, #8
 8001a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2204      	movs	r2, #4
 8001a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f8d0 	bl	8001c2e <HAL_TIM_IC_CaptureCallback>
 8001a8e:	e005      	b.n	8001a9c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f8c3 	bl	8001c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8d2 	bl	8001c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d020      	beq.n	8001aee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01b      	beq.n	8001aee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f06f 0210 	mvn.w	r2, #16
 8001abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f8aa 	bl	8001c2e <HAL_TIM_IC_CaptureCallback>
 8001ada:	e005      	b.n	8001ae8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f89d 	bl	8001c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8ac 	bl	8001c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00c      	beq.n	8001b12 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f06f 0201 	mvn.w	r2, #1
 8001b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f87c 	bl	8001c0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fa7a 	bl	800202a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00c      	beq.n	8001b5a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f87c 	bl	8001c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00c      	beq.n	8001b7e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f06f 0220 	mvn.w	r2, #32
 8001b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fa4d 	bl	8002018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_SlaveConfigSynchro+0x18>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e031      	b.n	8001c02 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001bae:	6839      	ldr	r1, [r7, #0]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8c5 	bl	8001d40 <TIM_SlaveTimer_SetConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e018      	b.n	8001c02 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bde:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001bee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a2f      	ldr	r2, [pc, #188]	@ (8001d34 <TIM_Base_SetConfig+0xd0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00b      	beq.n	8001c94 <TIM_Base_SetConfig+0x30>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c82:	d007      	beq.n	8001c94 <TIM_Base_SetConfig+0x30>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a2c      	ldr	r2, [pc, #176]	@ (8001d38 <TIM_Base_SetConfig+0xd4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d003      	beq.n	8001c94 <TIM_Base_SetConfig+0x30>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d3c <TIM_Base_SetConfig+0xd8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d108      	bne.n	8001ca6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a22      	ldr	r2, [pc, #136]	@ (8001d34 <TIM_Base_SetConfig+0xd0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00b      	beq.n	8001cc6 <TIM_Base_SetConfig+0x62>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb4:	d007      	beq.n	8001cc6 <TIM_Base_SetConfig+0x62>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d38 <TIM_Base_SetConfig+0xd4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d003      	beq.n	8001cc6 <TIM_Base_SetConfig+0x62>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d3c <TIM_Base_SetConfig+0xd8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8001d34 <TIM_Base_SetConfig+0xd0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d103      	bne.n	8001d0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f023 0201 	bic.w	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800

08001d40 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d5c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f023 0307 	bic.w	r3, r3, #7
 8001d6e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b70      	cmp	r3, #112	@ 0x70
 8001d88:	d01a      	beq.n	8001dc0 <TIM_SlaveTimer_SetConfig+0x80>
 8001d8a:	2b70      	cmp	r3, #112	@ 0x70
 8001d8c:	d860      	bhi.n	8001e50 <TIM_SlaveTimer_SetConfig+0x110>
 8001d8e:	2b60      	cmp	r3, #96	@ 0x60
 8001d90:	d054      	beq.n	8001e3c <TIM_SlaveTimer_SetConfig+0xfc>
 8001d92:	2b60      	cmp	r3, #96	@ 0x60
 8001d94:	d85c      	bhi.n	8001e50 <TIM_SlaveTimer_SetConfig+0x110>
 8001d96:	2b50      	cmp	r3, #80	@ 0x50
 8001d98:	d046      	beq.n	8001e28 <TIM_SlaveTimer_SetConfig+0xe8>
 8001d9a:	2b50      	cmp	r3, #80	@ 0x50
 8001d9c:	d858      	bhi.n	8001e50 <TIM_SlaveTimer_SetConfig+0x110>
 8001d9e:	2b40      	cmp	r3, #64	@ 0x40
 8001da0:	d019      	beq.n	8001dd6 <TIM_SlaveTimer_SetConfig+0x96>
 8001da2:	2b40      	cmp	r3, #64	@ 0x40
 8001da4:	d854      	bhi.n	8001e50 <TIM_SlaveTimer_SetConfig+0x110>
 8001da6:	2b30      	cmp	r3, #48	@ 0x30
 8001da8:	d055      	beq.n	8001e56 <TIM_SlaveTimer_SetConfig+0x116>
 8001daa:	2b30      	cmp	r3, #48	@ 0x30
 8001dac:	d850      	bhi.n	8001e50 <TIM_SlaveTimer_SetConfig+0x110>
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	d051      	beq.n	8001e56 <TIM_SlaveTimer_SetConfig+0x116>
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d84c      	bhi.n	8001e50 <TIM_SlaveTimer_SetConfig+0x110>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d04d      	beq.n	8001e56 <TIM_SlaveTimer_SetConfig+0x116>
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d04b      	beq.n	8001e56 <TIM_SlaveTimer_SetConfig+0x116>
 8001dbe:	e047      	b.n	8001e50 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8001dd0:	f000 f8a4 	bl	8001f1c <TIM_ETR_SetConfig>
      break;
 8001dd4:	e040      	b.n	8001e58 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d101      	bne.n	8001de2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e03b      	b.n	8001e5a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e08:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	621a      	str	r2, [r3, #32]
      break;
 8001e26:	e017      	b.n	8001e58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e34:	461a      	mov	r2, r3
 8001e36:	f000 f814 	bl	8001e62 <TIM_TI1_ConfigInputStage>
      break;
 8001e3a:	e00d      	b.n	8001e58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f000 f838 	bl	8001ebe <TIM_TI2_ConfigInputStage>
      break;
 8001e4e:	e003      	b.n	8001e58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	75fb      	strb	r3, [r7, #23]
      break;
 8001e54:	e000      	b.n	8001e58 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8001e56:	bf00      	nop
  }

  return status;
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f023 0201 	bic.w	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f023 030a 	bic.w	r3, r3, #10
 8001e9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	621a      	str	r2, [r3, #32]
}
 8001eb4:	bf00      	nop
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b087      	sub	sp, #28
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f023 0210 	bic.w	r2, r3, #16
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	031b      	lsls	r3, r3, #12
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001efa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	621a      	str	r2, [r3, #32]
}
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	021a      	lsls	r2, r3, #8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	609a      	str	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e046      	b.n	8002002 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a16      	ldr	r2, [pc, #88]	@ (800200c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc0:	d009      	beq.n	8001fd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a10      	ldr	r2, [pc, #64]	@ (8002014 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800

08002018 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e042      	b.n	80020d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fb9e 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	@ 0x24
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800207e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fd09 	bl	8002a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	4613      	mov	r3, r2
 80020e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d121      	bne.n	800213a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_UART_Transmit_IT+0x26>
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e01a      	b.n	800213c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2221      	movs	r2, #33	@ 0x21
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002134:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800213a:	2302      	movs	r3, #2
  }
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	4613      	mov	r3, r2
 8002152:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b20      	cmp	r3, #32
 800215e:	d112      	bne.n	8002186 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_UART_Receive_IT+0x26>
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e00b      	b.n	8002188 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	461a      	mov	r2, r3
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fab6 	bl	80026ee <UART_Start_Receive_IT>
 8002182:	4603      	mov	r3, r0
 8002184:	e000      	b.n	8002188 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0ba      	sub	sp, #232	@ 0xe8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80021ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10f      	bne.n	80021f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_UART_IRQHandler+0x66>
 80021e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fb93 	bl	800291a <UART_Receive_IT>
      return;
 80021f4:	e25b      	b.n	80026ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80de 	beq.w	80023bc <HAL_UART_IRQHandler+0x22c>
 8002200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d106      	bne.n	800221a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800220c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002210:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80d1 	beq.w	80023bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800221a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_UART_IRQHandler+0xae>
 8002226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800222a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_UART_IRQHandler+0xd2>
 800224a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f043 0202 	orr.w	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_UART_IRQHandler+0xf6>
 800226e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	f043 0204 	orr.w	r2, r3, #4
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d011      	beq.n	80022b6 <HAL_UART_IRQHandler+0x126>
 8002292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800229e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f043 0208 	orr.w	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 81f2 	beq.w	80026a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_UART_IRQHandler+0x14e>
 80022cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fb1e 	bl	800291a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <HAL_UART_IRQHandler+0x17a>
 8002302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d04f      	beq.n	80023aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fa28 	bl	8002760 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d041      	beq.n	80023a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3314      	adds	r3, #20
 8002324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800232c:	e853 3f00 	ldrex	r3, [r3]
 8002330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800233c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3314      	adds	r3, #20
 8002346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800234a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800234e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800235a:	e841 2300 	strex	r3, r2, [r1]
 800235e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1d9      	bne.n	800231e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d013      	beq.n	800239a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002376:	4a7e      	ldr	r2, [pc, #504]	@ (8002570 <HAL_UART_IRQHandler+0x3e0>)
 8002378:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fc9e 	bl	8000cc0 <HAL_DMA_Abort_IT>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d016      	beq.n	80023b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002394:	4610      	mov	r0, r2
 8002396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002398:	e00e      	b.n	80023b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f993 	bl	80026c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a0:	e00a      	b.n	80023b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f98f 	bl	80026c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a8:	e006      	b.n	80023b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f98b 	bl	80026c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80023b6:	e175      	b.n	80026a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b8:	bf00      	nop
    return;
 80023ba:	e173      	b.n	80026a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	f040 814f 	bne.w	8002664 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8148 	beq.w	8002664 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8141 	beq.w	8002664 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80b6 	beq.w	8002574 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002414:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8145 	beq.w	80026a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002426:	429a      	cmp	r2, r3
 8002428:	f080 813e 	bcs.w	80026a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002432:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b20      	cmp	r3, #32
 800243c:	f000 8088 	beq.w	8002550 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	330c      	adds	r3, #12
 8002446:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800244e:	e853 3f00 	ldrex	r3, [r3]
 8002452:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002456:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800245a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800245e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800246c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002470:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002474:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002478:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800247c:	e841 2300 	strex	r3, r2, [r1]
 8002480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1d9      	bne.n	8002440 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3314      	adds	r3, #20
 8002492:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002494:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002496:	e853 3f00 	ldrex	r3, [r3]
 800249a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800249c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3314      	adds	r3, #20
 80024ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024b0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80024b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024bc:	e841 2300 	strex	r3, r2, [r1]
 80024c0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80024c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e1      	bne.n	800248c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3314      	adds	r3, #20
 80024ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024d2:	e853 3f00 	ldrex	r3, [r3]
 80024d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80024d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3314      	adds	r3, #20
 80024e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80024ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80024f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024f4:	e841 2300 	strex	r3, r2, [r1]
 80024f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80024fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e3      	bne.n	80024c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330c      	adds	r3, #12
 8002514:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002518:	e853 3f00 	ldrex	r3, [r3]
 800251c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800251e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002520:	f023 0310 	bic.w	r3, r3, #16
 8002524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	330c      	adds	r3, #12
 800252e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002532:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002534:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002536:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002538:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800253a:	e841 2300 	strex	r3, r2, [r1]
 800253e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e3      	bne.n	800250e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fb7d 	bl	8000c4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800255e:	b29b      	uxth	r3, r3
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	b29b      	uxth	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8b6 	bl	80026d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800256c:	e09c      	b.n	80026a8 <HAL_UART_IRQHandler+0x518>
 800256e:	bf00      	nop
 8002570:	08002825 	.word	0x08002825
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800257c:	b29b      	uxth	r3, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 808e 	beq.w	80026ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8089 	beq.w	80026ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	330c      	adds	r3, #12
 80025a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a4:	e853 3f00 	ldrex	r3, [r3]
 80025a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80025aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025be:	647a      	str	r2, [r7, #68]	@ 0x44
 80025c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025c6:	e841 2300 	strex	r3, r2, [r1]
 80025ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e3      	bne.n	800259a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3314      	adds	r3, #20
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	e853 3f00 	ldrex	r3, [r3]
 80025e0:	623b      	str	r3, [r7, #32]
   return(result);
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3314      	adds	r3, #20
 80025f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80025f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80025f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025fe:	e841 2300 	strex	r3, r2, [r1]
 8002602:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e3      	bne.n	80025d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	e853 3f00 	ldrex	r3, [r3]
 8002626:	60fb      	str	r3, [r7, #12]
   return(result);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0310 	bic.w	r3, r3, #16
 800262e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	330c      	adds	r3, #12
 8002638:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800263c:	61fa      	str	r2, [r7, #28]
 800263e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002640:	69b9      	ldr	r1, [r7, #24]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	e841 2300 	strex	r3, r2, [r1]
 8002648:	617b      	str	r3, [r7, #20]
   return(result);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e3      	bne.n	8002618 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f83b 	bl	80026d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002662:	e023      	b.n	80026ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <HAL_UART_IRQHandler+0x4f4>
 8002670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f8e5 	bl	800284c <UART_Transmit_IT>
    return;
 8002682:	e014      	b.n	80026ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00e      	beq.n	80026ae <HAL_UART_IRQHandler+0x51e>
 8002690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f924 	bl	80028ea <UART_EndTransmit_IT>
    return;
 80026a2:	e004      	b.n	80026ae <HAL_UART_IRQHandler+0x51e>
    return;
 80026a4:	bf00      	nop
 80026a6:	e002      	b.n	80026ae <HAL_UART_IRQHandler+0x51e>
      return;
 80026a8:	bf00      	nop
 80026aa:	e000      	b.n	80026ae <HAL_UART_IRQHandler+0x51e>
      return;
 80026ac:	bf00      	nop
  }
}
 80026ae:	37e8      	adds	r7, #232	@ 0xe8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	4613      	mov	r3, r2
 80026fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	88fa      	ldrh	r2, [r7, #6]
 8002706:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2222      	movs	r2, #34	@ 0x22
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002732:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0220 	orr.w	r2, r2, #32
 8002752:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002760:	b480      	push	{r7}
 8002762:	b095      	sub	sp, #84	@ 0x54
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	330c      	adds	r3, #12
 800276e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800277e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002788:	643a      	str	r2, [r7, #64]	@ 0x40
 800278a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800278e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002790:	e841 2300 	strex	r3, r2, [r1]
 8002794:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e5      	bne.n	8002768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3314      	adds	r3, #20
 80027ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e5      	bne.n	800279c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d119      	bne.n	800280c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	330c      	adds	r3, #12
 80027de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	e853 3f00 	ldrex	r3, [r3]
 80027e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f023 0310 	bic.w	r3, r3, #16
 80027ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027f8:	61ba      	str	r2, [r7, #24]
 80027fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fc:	6979      	ldr	r1, [r7, #20]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	e841 2300 	strex	r3, r2, [r1]
 8002804:	613b      	str	r3, [r7, #16]
   return(result);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e5      	bne.n	80027d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800281a:	bf00      	nop
 800281c:	3754      	adds	r7, #84	@ 0x54
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff ff41 	bl	80026c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b21      	cmp	r3, #33	@ 0x21
 800285e:	d13e      	bne.n	80028de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002868:	d114      	bne.n	8002894 <UART_Transmit_IT+0x48>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d110      	bne.n	8002894 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002886:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	621a      	str	r2, [r3, #32]
 8002892:	e008      	b.n	80028a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	1c59      	adds	r1, r3, #1
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6211      	str	r1, [r2, #32]
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4619      	mov	r1, r3
 80028b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028de:	2302      	movs	r3, #2
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002900:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fed2 	bl	80026b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b08c      	sub	sp, #48	@ 0x30
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b22      	cmp	r3, #34	@ 0x22
 800292c:	f040 80ae 	bne.w	8002a8c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002938:	d117      	bne.n	800296a <UART_Receive_IT+0x50>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d113      	bne.n	800296a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	b29b      	uxth	r3, r3
 8002954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002958:	b29a      	uxth	r2, r3
 800295a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	1c9a      	adds	r2, r3, #2
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
 8002968:	e026      	b.n	80029b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800297c:	d007      	beq.n	800298e <UART_Receive_IT+0x74>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <UART_Receive_IT+0x82>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e008      	b.n	80029ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4619      	mov	r1, r3
 80029c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d15d      	bne.n	8002a88 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0220 	bic.w	r2, r2, #32
 80029da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d135      	bne.n	8002a7e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	613b      	str	r3, [r7, #16]
   return(result);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f023 0310 	bic.w	r3, r3, #16
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a38:	623a      	str	r2, [r7, #32]
 8002a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	69f9      	ldr	r1, [r7, #28]
 8002a3e:	6a3a      	ldr	r2, [r7, #32]
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e5      	bne.n	8002a18 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d10a      	bne.n	8002a70 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff fe2e 	bl	80026d8 <HAL_UARTEx_RxEventCallback>
 8002a7c:	e002      	b.n	8002a84 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fd fdf8 	bl	8000674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e002      	b.n	8002a8e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3730      	adds	r7, #48	@ 0x30
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002ad2:	f023 030c 	bic.w	r3, r3, #12
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2c      	ldr	r2, [pc, #176]	@ (8002bac <UART_SetConfig+0x114>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d103      	bne.n	8002b08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b00:	f7fe fed0 	bl	80018a4 <HAL_RCC_GetPCLK2Freq>
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	e002      	b.n	8002b0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b08:	f7fe feb8 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 8002b0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009a      	lsls	r2, r3, #2
 8002b18:	441a      	add	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	4a22      	ldr	r2, [pc, #136]	@ (8002bb0 <UART_SetConfig+0x118>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	0119      	lsls	r1, r3, #4
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b44:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <UART_SetConfig+0x118>)
 8002b46:	fba3 0302 	umull	r0, r3, r3, r2
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2064      	movs	r0, #100	@ 0x64
 8002b4e:	fb00 f303 	mul.w	r3, r0, r3
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	3332      	adds	r3, #50	@ 0x32
 8002b58:	4a15      	ldr	r2, [pc, #84]	@ (8002bb0 <UART_SetConfig+0x118>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b64:	4419      	add	r1, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	441a      	add	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <UART_SetConfig+0x118>)
 8002b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2064      	movs	r0, #100	@ 0x64
 8002b86:	fb00 f303 	mul.w	r3, r0, r3
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	3332      	adds	r3, #50	@ 0x32
 8002b90:	4a07      	ldr	r2, [pc, #28]	@ (8002bb0 <UART_SetConfig+0x118>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	440a      	add	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	51eb851f 	.word	0x51eb851f

08002bb4 <memcmp>:
 8002bb4:	b510      	push	{r4, lr}
 8002bb6:	3901      	subs	r1, #1
 8002bb8:	4402      	add	r2, r0
 8002bba:	4290      	cmp	r0, r2
 8002bbc:	d101      	bne.n	8002bc2 <memcmp+0xe>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e005      	b.n	8002bce <memcmp+0x1a>
 8002bc2:	7803      	ldrb	r3, [r0, #0]
 8002bc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002bc8:	42a3      	cmp	r3, r4
 8002bca:	d001      	beq.n	8002bd0 <memcmp+0x1c>
 8002bcc:	1b18      	subs	r0, r3, r4
 8002bce:	bd10      	pop	{r4, pc}
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	e7f2      	b.n	8002bba <memcmp+0x6>

08002bd4 <memset>:
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4402      	add	r2, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <__libc_init_array>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	2600      	movs	r6, #0
 8002be8:	4d0c      	ldr	r5, [pc, #48]	@ (8002c1c <__libc_init_array+0x38>)
 8002bea:	4c0d      	ldr	r4, [pc, #52]	@ (8002c20 <__libc_init_array+0x3c>)
 8002bec:	1b64      	subs	r4, r4, r5
 8002bee:	10a4      	asrs	r4, r4, #2
 8002bf0:	42a6      	cmp	r6, r4
 8002bf2:	d109      	bne.n	8002c08 <__libc_init_array+0x24>
 8002bf4:	f000 f81a 	bl	8002c2c <_init>
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	4d0a      	ldr	r5, [pc, #40]	@ (8002c24 <__libc_init_array+0x40>)
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8002c28 <__libc_init_array+0x44>)
 8002bfe:	1b64      	subs	r4, r4, r5
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	42a6      	cmp	r6, r4
 8002c04:	d105      	bne.n	8002c12 <__libc_init_array+0x2e>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0c:	4798      	blx	r3
 8002c0e:	3601      	adds	r6, #1
 8002c10:	e7ee      	b.n	8002bf0 <__libc_init_array+0xc>
 8002c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c16:	4798      	blx	r3
 8002c18:	3601      	adds	r6, #1
 8002c1a:	e7f2      	b.n	8002c02 <__libc_init_array+0x1e>
 8002c1c:	08002c80 	.word	0x08002c80
 8002c20:	08002c80 	.word	0x08002c80
 8002c24:	08002c80 	.word	0x08002c80
 8002c28:	08002c84 	.word	0x08002c84

08002c2c <_init>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr

08002c38 <_fini>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr
